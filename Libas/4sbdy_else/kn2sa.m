function [x] = kn2sa(band,ascii1_name);% function [] = kn2sa%% Funktion oeffnet mit feige2kn.m ein file und wandelt dieses% in eine hirarchische Struktur%%        --------  Elektroden -----------------%        ----- Bedingungen -------------------%        - Zeitfenster ---------------------%% -Vps in Zeilen% -das ausgewaehlte Band wird gemittelt%% Parameter sind vom User im Quelltext einzutragen%% August 1997 - T.Gruber%n_zeitfenster = 64elektroden = [];			% [] : alle E.mittel_e   = 0;        		% 1  : Elektroden mitteln		       				% 0  : Elektroden nicht gemittelt	 mittel_vp = 0         		% 1 = Alle Vps mitteln                      		% 0 = jede Vp als einzelne Zeile%zeit_f     = []	               % Zeitfenster, die zusammengefasst werden									% sollen		%zeit_f = [1 1;2 2;3 3;4 4;5 5;6 6;7 7;8 8;9 9;10 10;11 11;12 12; 13 13;%          14 14; 15 15; 16 16;17 17;18 18; 19 19; 20 20; 21 21; 22 22; 23 23;%		  24 24; 25 25; 26 26; 27 27; 28 28; 29 29; 30 30; 31 31; 32 32;%		   33 33; 34 34; 35 35; 36 36; 37 37; 38 38; 39 39; 40 40; 41 41;%		   42 42; 43 43; 44 44; 45 45; 46 46; 47 47; 48 48; 49 49; 50 50;%		   51 51; 52 52; 53 53; 54 54; 55 55; 56 56; 57 57; 58 58; 59 59;%		   60 60; 61 61; 62 62; 63 63; 64 64]%zeit_f = [5 8;9 12;13 16;17 20;21 24]zeit_f = [2 6;10 14;18 22;27 31;35 39;43 47;51 55;59 63]vps = ['tg';'tk'; 'hs'; 'je'; 'sp'; 'vd'; 'dw'; 'dp'; 'ss'; 'sg'; 'sr'; 'ag'; 'bo'; 'hk']ascii1_name%ascii1_name = ['d:\feige\s1.asc'] 	% Ascii File fuer erzeugte Strukturascii2_name = []		% Ascii File für Matrix zum plottenbild = 0		        % 1 = Struktur wird gezeichnet		                % 0 = Struktur wird nicht gezeichnet	% ! Pfade 5 Zeilen weiter unten eintragen% Hauptschleife; alle Vps durchgehenx = [];x_bild = [];for hs = 1 : size(vps,1)  vp = vps(hs,:);  files = [vp '.E1.app2.mfx.ASC';vp '.E1.app3.mfx.ASC';vp '.E1.app6.mfx.ASC';vp '.E1.app7.mfx.ASC'];  pfad = ['Voyager:Users:Gruber:Dipl_BL_korrigiert:' vp ]    % Alle Bedingungen einer Vp durchgehen  erg_bed = [];  for n_files = 1 : size(files,1)      erg =[];            datei = [ pfad ':' files(n_files,:) ]     [SFreq,Nr_of_averages,channels,points,zf,frequenzen,erg] = feige2kn(datei,band);	    % nicht ausgewählte Elektroden löschen, in richtige Reihenfolge bringen    % und optional mitteln    if elektroden == [] elektroden = 1:channels; end;    erg_dummy = [];    for i = 1 : size(elektroden,2)      erg_dummy = [erg_dummy erg(:,elektroden(i))];    end;    erg = erg_dummy;    channels = size(elektroden,2);    if mittel_e == 1 erg = mean(erg')';channels = 1;end;    % Ende : nicht ausgewaehlte Elektroden loeschen,in richtige Reihenfolge bringen    %        und optional mitteln  	      % Mitteln des ausgewaehlten Bandes    erg_dummy = [];    if band(1) ~= band(2)      for i = 1 : (band(2)-band(1)+1) : n_zeitfenster*(band(2)-band(1)+1)		erg_dummy = [erg_dummy; mean(erg(i:i + band(2)-band(1),:))];      end;      erg = erg_dummy;    end;        % Ende : Mitteln des ausgewaehlten Bandes        % Zusammenfassen von Zeitfenstern        erg_dummy  = [];    if zeit_f ~= []      for l1 = 1:size(zeit_f,1)        if zeit_f(l1,1) == zeit_f(l1,2)          erg_dummy = [erg_dummy;erg(zeit_f(l1,1),:)];         else          erg_dummy = [erg_dummy;mean(erg(zeit_f(l1,1):zeit_f(l1,2),:))];        end;      end;      erg = erg_dummy;    end;            % Ende : Zusammenfassen von Zeitfenstern        % erg hat nun folgende Struktur    %     %         E1 E2 E3 ....     % Zeitf.1    % Zeitf.2    % ...    %      % Frequenzbaender sind gemittelt    %        % Umsortieren    erg_dummy = [];    for l = 1 : channels      erg_dummy=[erg_dummy erg(:,l)'];    end;    erg = erg_dummy;    % Ende : Umsortieren        %    % erg hat nun folgende Struktur (nur eine Zeile)      %    % Elektrode1 Elektrode2 ....    % Zf1 ZF2 ..      %    erg_bed = [erg_bed erg];    end;   % Ende : Alle Bedingungen einer Vp durchgehen  %   % die Struktur von erg_bed sieht nun folgendermassen aus :   % ( ein ZEILENVEKTOR )  %  %        --------  Bedingungen -------------  %        ----- Elektroden -------------------  %        - Zeitfenster ---------------------  %  % um das endgueltige Erg herzustellen muss also nochmals umgestellt werden   %    erg_dummy = [];  for nd = 1 : size(zeit_f,1) : channels * size(zeit_f,1)    for nb = 1 : size(zeit_f,1) * channels : size(zeit_f,1) * channels * size(files,1)       erg_dummy = [erg_dummy, erg_bed( nb+nd-1 : nb+nd-1+ size(zeit_f,1)-1) ];    end;  end;       x = [x;erg_dummy];  x_bild =[x_bild; erg_bed];  end; % Ende : Hauptschleife; alle Vps durchgehen% Vps mittelnif size(vps,1) ~= 1  if mittel_vp == 1    x = mean(x);  end; end;% Ergebnis Struktur als Ascii-File Speichernif ascii1_name ~= []  s = [ 'save ' ascii1_name ' x -ascii;' ];  eval (s);end;% Bild zeichnen und dafür nötige Struktur erzeugen% Vps mittelnif size(vps,1) ~= 1  x_bild = mean(x_bild);end; erg_dummy = [];abstand = channels * size(zeit_f,1);for i = 0 : (size(files,1)-1)  erg_dummy = [erg_dummy x_bild( (i*abstand)+1 : ((i+1)*abstand) )'];end;x_bild = erg_dummy;% Wenn die Elektroden noch nicht gemittelt wurden, hat x_bild nun% folgende Struktur:    (sonst hat man schon das Ergebnis)%%         Bed1 Bed2 Bed3 ...% E1 ZF1%    ZF2%    ZF3%     ..% E2 ZF1%    ZF2%     ..% Mitteln der Elektroden falls dies noch nicht gemacht wurdeif mittel_e == 0  x_n1 = [];  x_n2 = [];    for b = 0 : size(zeit_f,1)-1    for a = 1 : size(zeit_f,1) : channels*size(zeit_f,1)      x_n2 = [x_n2; x_bild(a+b,:)];    end;    x_n2 = mean(x_n2);     x_n1=[x_n1;x_n2];    x_n2=[];  end;  x_bild = x_n1;end;if bild == 1  achse = [];  for r = 1 : size(zeit_f,1)    achse = [achse,zeit_f(r)];  end;    achse  for r = 1 : size(x_bild,2)    figure    line(achse,x_bild(:,r));  end;end;% Ende : Bild zeichnenif ascii2_name ~= []  s = [ 'save ' ascii2_name ' x_bild -ascii;' ];  eval (s);end;