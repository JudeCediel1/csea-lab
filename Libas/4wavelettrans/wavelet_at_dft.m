% magno_waveletfunction [WaPower] = wavelet_at_dft(filemat, f0start, f0end, fdelta); if nargin < 5,     refelec = []; end% 1. read data to get infofor fileindex = 1:size(filemat,1)        [data,File,Path,FilePath,NTrialAvgVec,StdChanTimeMat,SampRate]=ReadAvgFile(deblank(filemat(fileindex,:)));  NPointsNew = size(data,2);       % compute wavelets and their parameters   wavelet = gener_wav(NPointsNew, fdelta, f0start, f0end);   disp('size of waveletMatrix')  disp(size(wavelet))  disp (' frequency step for delta_f0 = 1 is ')  disp(SampRate/NPointsNew)   data_pad = [data]';       % create 3d matrix objects for wavelet   % channels * time * frequencies       waveletMat3d = repmat(wavelet, [1 1 size(data,1)]);     waveletMat3d = permute(waveletMat3d, [3, 2, 1]);                  fprintf('.')                      data = bslcorr(data, 1:100);                 data_pad = [data]';        % window data with cosine square window                window = cosinwin(30, size(data,2), size(data,1));         data = data .* window;                 data_pad3d = repmat(data_pad', [1 1 size(wavelet,1)]);             % transform data  to the frequency        data_trans = fft(data_pad3d, NPointsNew, 2);        thetaMATLABretrans = [];         ProdMat= waveletMat3d .*(data_trans);        thetaMATLABretrans = ifft(ProdMat, NPointsNew, 2);                % standardize instantaneous phase        stdcomplexphasemat = thetaMATLABretrans ./ abs(thetaMATLABretrans);                         WaPower = abs(thetaMATLABretrans).* 10;      eval(['save ' deblank(filemat(fileindex,:)) '.Epow3.mat WaPower'])            fclose('all') end