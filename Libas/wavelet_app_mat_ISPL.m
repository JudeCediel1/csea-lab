% magno_waveletfunction [ISPLI_4d] = wavelet_app_mat_ISPL(mat1, mat2, SampRate, f0start, f0end, fdelta, outname); if nargin < 7,     outname = test ;    endif nargin < 6,     refelec = [];     PLIdiff = []; endPLIsum = [];       ISPLI_4d_diffmat = [];  data1 = mat1;data2 = mat2;   NPointsNew = size(data1,2);     NTrials = size(data1,3);       % compute wavelets and their parameters   wavelet = gener_wav(NPointsNew, fdelta, f0start, f0end);   disp('size of waveletMatrix')  disp(size(wavelet))  disp (' frequency step for delta_f0 = 1 is ')  disp(SampRate/NPointsNew)        % create 3d matrix objects for wavelet   % channels * time * frequencies       waveletMat3d_1 = repmat(wavelet, [1 1 size(data1,1)]);     waveletMat3d_1 = permute(waveletMat3d_1, [3, 2, 1]);          waveletMat3d_2 = repmat(wavelet, [1 1 size(data2,1)]);     waveletMat3d_2 = permute(waveletMat3d_2, [3, 2, 1]);         % loop over trials        disp(['trial index of '])    disp(NTrials)        for trialindex = 1:NTrials;                 disp(['trial: ' num2str(trialindex)])               Data1 = data1(:,:,trialindex);        Data2 = data2(:,:,trialindex);                         if trialindex/10 == round(trialindex/10), disp(trialindex), end            Data1 = bslcorr(Data1, 1:200);         Data2 = bslcorr(Data2, 1:200);                        size(Data1), size(Data2),        % window data with cosine square window        window1 = cosinwin(20, size(Data1,2), size(Data1,1));         window2 = cosinwin(20, size(Data2,2), size(Data2,1));                 Data1 = Data1 .* window1;     Data2 = Data2 .* window2;                 data_pad3d_1 = repmat(Data1, [1 1 size(wavelet,1)]);         data_pad3d_2 = repmat(Data2, [1 1 size(wavelet,1)]);             % transform data  to the frequency domain        data_trans_1 = fft(data_pad3d_1, NPointsNew, 2);        data_trans_2 = fft(data_pad3d_2, NPointsNew, 2);        thetaMATLABretrans_1 = [];         thetaMATLABretrans_2 = [];         ProdMat_1= waveletMat3d_1 .*(data_trans_1);        ProdMat_2= waveletMat3d_2 .*(data_trans_2);                thetaMATLABretrans_1 = ifft(ProdMat_1, NPointsNew, 2);        thetaMATLABretrans_2 = ifft(ProdMat_2, NPointsNew, 2);                % standardize instantaneous phase        stdcomplexphasemat_1 = thetaMATLABretrans_1 ./ abs(thetaMATLABretrans_1);        stdcomplexphasemat_2 = thetaMATLABretrans_2 ./ abs(thetaMATLABretrans_2);                % calculate inter-site PLI for each sensor of mat1 with all of mat2        % and write result in 4-d array        %           ISPLI_4d_diffmat = [];                    for refelec = 1:size(mat1,1);                     PLIdiffmat = stdcomplexphasemat_2- (repmat(stdcomplexphasemat_1(refelec,:,:), [size(mat2,1), 1, 1]));                               %standardize the difference            PLIdiffmat = PLIdiffmat./(abs(PLIdiffmat));             ISPLI_4d_diffmat(:, :, :, refelec) = PLIdiffmat;                      end                    if trialindex == 1                  ISPLI_4d_sum = ISPLI_4d_diffmat;             else               ISPLI_4d_sum = ISPLI_4d_sum+ ISPLI_4d_diffmat;             end                 end % loop over trials        ISPLI_4d = abs(ISPLI_4d_sum./NTrials);                if ~isempty(outname)            eval(['save ' outname '.ispl4d_' num2str(refelec) '.mat ISPLI_4d']),          end