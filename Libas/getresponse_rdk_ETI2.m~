% searches condnumbers in *dat file generated by rdkiaps file

function [outmat_acc] = getresponse_rdk_ETI2(filemat); %filepat = .dat file 
% can print out all of this...function [ conditionvec, RT, errorvec, onsettime, targetvec, earlylatelabel, picvec, outmat, RTvecEarlyLate, correctvec] = getresponse_rdk(filepath);

alltrialindexvec = 1:90; alltrialindexvec = alltrialindexvec'; 

oumat_all = [];

for fileindex = 1:size(filemat,1); 

    filepath = deblank(filemat(fileindex,:))

    condvec = []; 

    picvec = [];

    fid = fopen(filepath);

    trialcount = 1;
    
a = 1;
	
 while a > 0
	
     a = fgetl(fid);
     
     if a < 0, break, return, end
            
     % find the blanks - > so I know where the picture name is 
     blankindices = find(a== ' '); 
     
      conditionTar = deblank(a(blankindices(3)+1)); %target/non-target condition file is after 3rd blank (1, 2, or 3)
      
      targetvec(trialcount) = str2num(conditionTar);
      
      onsettimetemp = deblank(a(blankindices(4):blankindices(4)+2));
      
      onsettime(trialcount) = str2num(onsettimetemp).*133.333 - 133.333 -1000;
            
     picturestring = (a((blankindices(7)+1:blankindices(7)+2))); %get the picture name info after the 7th blank
     picturestring_long = (a((blankindices(7)+1:blankindices(7)+4))); %get the picture name info after the 7th blank
     picvec = [picvec; picturestring_long];
     
     rt(trialcount) = str2num(a(blankindices(6):blankindices(7))); %get the RT info after the 6th blank
     
     if rt(trialcount) < 0, rt(trialcount) = rt(trialcount)+ 8751; end %8751 is the average tic/toc for trial length. Here we're using the ONSET of the 4 flick cycles for RT info   
          
               if picturestring ==  'er', condition(trialcount) = 1;
                elseif picturestring ==  'ct', condition(trialcount) = 1;    
                elseif picturestring ==  'ca', condition(trialcount) = 1;
                elseif picturestring ==  'wr', condition(trialcount) = 2;
                elseif picturestring ==  'wk', condition(trialcount) = 2;
                elseif picturestring ==  'cw', condition(trialcount) = 2;
                elseif picturestring ==  'co', condition(trialcount) = 2; 
                elseif picturestring ==  'mu', condition(trialcount) = 3;
                elseif picturestring ==  'mt', condition(trialcount) = 3;    
                elseif picturestring ==  'sn', condition(trialcount) = 3;
                
                end
      
              trialcount;
 
              
trialcount = trialcount + 1; 
 end % while loop trials
 
 % DONE READING THE FILE
 
fclose('all')
  
targetvec = targetvec' .* 100;

conditionvec = condition' + targetvec; 
  
conditionvec1to3 = condition'; %condition = picture conditions, 

rt = rt' .*0.001; %change RT into seconds

onsettime = onsettime' .*0.001; %change onset time also into seconds

RT = rt;
RT(rt>0) = rt(rt>0)-onsettime(rt>0);% convert rt relative to picture offset to RT relative to target
%RT = RT' %this is to account for non-presses when a non-target (corr.
%rejections) .. auto put RT for non-target as 0.116 and had to make sure all non-press RT's are set to ZERO

duringpiclabel  = zeros(size(RT)); 
duringpiclabel(onsettime>2) = 1;

conditionvecPicRT =[conditionvec  RT]; % can use a semi-colon to have the conditionvec and RT values not stacked but side by side 
size(conditionvec);

% %create a vector that has 1s for correct responses, for each trial
indexvec_press = find(RT > .15);
correctvec = zeros(size(condition)); %empty vector to populate

targettrialindices = find(targetvec > 199 & targetvec <  299); %299 excludes the double-flick trials
notargettrialindices = find(targetvec > 99 & targetvec <  199); %excludes the double-flick trials and the one-target trials

% FIRST LOOK AT TARGETS where the picture is on and they pressed the key
targettrialindices_picon = targettrialindices(logical(duringpiclabel(targettrialindices))); length(targettrialindices_picon);

% find correct target trials across conditions, where the pic was on
for x1 = 1:length(correctvec) 
    if ismember(x1,targettrialindices_picon) && ismember(x1,indexvec_press), correctvec(x1) = 1; end %correct response = 1
end

indices_p = find(conditionvec1to3 ==1);
indices_n =  find(conditionvec1to3 ==2);
indices_u = find(conditionvec1to3 ==3);

%  find subpopulation of target trials with pic on in P N U 



for x1 = 1:length(conditionvec1to3) 
    if ismember(x1,targettrialindices_picon) && ismember(x1,indices_p), pleasanttarget_picon(x1) = 1; else pleasanttarget_picon(x1) = 0; end %correct response = 1
end

for x1 = 1:length(conditionvec1to3) 
    if ismember(x1,targettrialindices_picon) && ismember(x1,indices_n) , neutraltarget_picon(x1) = 1; end %correct response = 1
end

for x1 = 1:length(conditionvec1to3) 
    if ismember(x1,targettrialindices_picon) && ismember(x1,indices_u), unpleasanttarget_picon(x1) = 1; end %correct response = 1
end


% find  how many of those are correct
for x1 = 1:length(conditionvec1to3) 
    if ismember(x1,targettrialindices_picon) && ismember(x1,indices_p) && correctvec(x1)==1, pleasanttarget_picon_corr(x1) = 1; else pleasanttarget_picon_corr (x1) = 0;end %correct response = 1
end

for x1 = 1:length(conditionvec1to3) 
    if ismember(x1,targettrialindices_picon) && ismember(x1,indices_n) && correctvec(x1)==1, neutraltarget_picon_corr(x1) = 1; end %correct response = 1
end

for x1 = 1:length(conditionvec1to3) 
    if ismember(x1,targettrialindices_picon) && ismember(x1,indices_u) && correctvec(x1)==1, unpleasanttarget_picon_corr(x1) = 1; end %correct response = 1
end

% %total # of how many of those (indices_*_picon) are correct
% % here a ONE is CORRECT, 0 is incorrect
total_p = sum(pleasanttarget_picon)
total_n = sum(neutraltarget_picon)
total_u = sum(unpleasanttarget_picon)

hits_p = sum(pleasanttarget_picon_corr)
hits_n = sum(neutraltarget_picon_corr)
hits_u = sum(unpleasanttarget_picon_corr)

ratio_p = hits_p/total(p

end