% PCAas% rechnet PCA fuer KN atg files% gibt zeitliche komponenten graphisch ausif ~exist('sameflag'), sameflag  = 0, end[AvgMat,File,Path,FilePath,NTrialAvgVec,StdChanTimeMat,SampRate] = readavgfile;disp (' ')disp ('SampRate ='), disp(SampRate)disp (size(AvgMat))if ~ sameflag, newsize = input('reduce size of input matrix: tpoints 1 to (scalar)...'), endAvgMat = AvgMat(:,[1:newsize]);sizeMat = size(AvgMat);if ~ sameflag, trig = input('Stimulus onset in ms         '); endtimeaxis = [1:1000/SampRate:sizeMat(1,2) * 1000/SampRate];taxis = timeaxis - trig;% figure (1)% plot (taxis, AvgMat(129,:))%title('channel 129')% berechne baselineif ~ sameflag, bslvec = input('baseline in samplepoints [a:b]'); endfor chan = 1 : 129baslcorMat(chan,:) = AvgMat(chan,:)-mean(AvgMat(chan,bslvec));endfigure(2)plot(taxis, baslcorMat)% berechne zeitliche PCAif ~ sameflag, type = input ('type of input matrix?   datamat (1)  covariances(2) correlations(3)   '); endif type == 1	inputmat = baslcorMat;elseif type == 2	disp('computing covariance matrix')	inputmat = cov(baslcorMat);elseif type ==3	disp('computing correlation matrix')	inputmat = corrcoef(baslcorMat);enddisp('matrix dimensions:')disp(size(inputmat)) if ~ sameflag, pcatimevec = input ('time segment for svd in spoints    '); end[U, S, V] = svd(inputmat(:,pcatimevec));Varvec = (diag(S)).^2/sum(diag(S).^2);figurefor comp = 1 : 4    compnumstr = num2str(comp);    Varstr = num2str(round(Varvec(comp)*100))	titlestring = ([File '; Component ' compnumstr]);    textstring = ([ ' % Var: 'Varstr ]);	subplot(2,2,comp), plot (taxis(pcatimevec), V(:,comp))    title (titlestring)    xlabel('time (ms)') 	text(0.9*min(taxis), 0.9*max(V(:,comp)), textstring)	end% topographische pca%load geo-eeg-lab:users:andreas1:elek.datfor comp = 1 : 4 	compnumstr = num2str(comp);% 	Varstr = num2str(round(Varvec(comp)*100));% 	titlestring = ([File '; Component ' compnumstr]);%         subplot(2,2,comp), fill3(elek(:,1), elek(:,2), elek(:,3), U([1:128],comp))%  	title (titlestring)% 		%if comp == 1	topo = U([1:129],comp);	PCAtopofile = ([File(1:15) '_topo' compnumstr]);	eval(['save ubies:tmp:'PCAtopofile ' topo -ascii'])	%endend	if ~ sameflag, yOno = input ('find significant Rs for a special topography ?  [y n]', 's'), endwhile yOno == 'y'			numfac = input('number of component','s')	PCAtopofile2 = ([File(1:8) '_topo' numfac]);	eval(['load ubies:tmp:'PCAtopofile2])         corrvec = eval(PCAtopofile2);  	signposelcvec = find(corrvec>0.18);	disp('electrodes with significant positive Rs to this component are:')	disp(signposelcvec)	signegelcvec = find(corrvec<-0.18);	disp('electrodes with significant negative Rs to this component are:')	disp(signegelcvec)	yOno = input ('find further significant Rs for a special topography ?  [y n]', 's')endsameflag = input ('run another file with same settings ? ( 0 / 1 )')if sameflag, run pcaas, endif ~sameflag, clear, end		