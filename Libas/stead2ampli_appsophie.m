%==================================================================%%	stead2amplitude%  samprate is the NEW NEW sample rate  - user needs to calculate such that% integer number of sample points fits in a cycle  foi = freq of interest% %	%	Function definition function [ampmat] = stead2ampli_appsophie(filemat, plotflag, bslvec, ssvepvec,foi,samprate)  if nargin < 2, plotflag = [], end  %this version works only on sophie's stuff....   % this to be done outside the loop to save time, needed for winshift proc sampcycle=1000/samprate; %added code for the new samplerate tempvec = round((1000/foi)/sampcycle); % this makes sure that average win duration is exactly @@, which is the duration in sp of one cyle at @@ Hz = @@ ms, sampled at 250 Hz longvec = repmat(tempvec,1,50); % repeat this many times, at least for duration of entire epoch, subsegments are created later  winshiftvec_long = cumsum(longvec)+ ssvepvec(1); % use cumsum function to create growing vector of indices for start of the winshift tempindexvec = find(winshiftvec_long > ssvepvec(end));   endindex = tempindexvec(1);  % this is the first index for which the winshiftvector exceeds the data segment  winshiftvec = winshiftvec_long(1:endindex-5); % need this stuff for the spectrum shiftcycle=round(tempvec*4);  samp=1000/samprate;        freqres = 1000/(shiftcycle*samp); %added code to find the appropriate bin for the frequency of interest for each segment        freqbins = 0:freqres:(samprate/2);         min_diff_vec = freqbins-foi;  %revised part        min_diff_vec = abs(min_diff_vec); %revised        targetbin=find(min_diff_vec==min(min_diff_vec)); %revised         for fileindex = 1 : size(filemat,1);    	FilePath = deblank(filemat(fileindex,:));   		[Data,Version,LHeader,ScaleBins,NChan,NPoints,NTrials,SampRate,AvgRefStatus,File,Path,FilePath,EegMegStatus,NChanExtra,AppFileFormatVal]=...	ReadAppData(FilePath,1);	    ampmat = [];    fftamp = []	for trial = 1:NTrials                [Data,Version,LHeader,ScaleBins,NChan,NPoints,NTrials,SampRate,AvgRefStatus,File,Path,FilePath,EegMegStatus,NChanExtra,AppFileFormatVal]=...        ReadAppData(FilePath,trial);       %============================================================	% resample data	%===========================================================               Data=Data';                    resampled=resample(Data,samprate,SampRate);                               Data = resampled';      	%============================================================	% 2. Baseline correction	%===========================================================		disp ('subtracting baseline')	    datamat = bslcorr(Data, bslvec);%===========================================================	% 3. moving window procedure with 4 cycles  !!!	% 	%===========================================================	disp('moving window procedure')		winmatsum = zeros(size(datamat,1),shiftcycle); %4 cycles		if plotflag, h = figure, end       for winshiftstep = 1:length(winshiftvec)		        winmatsum = (winmatsum + regressionMAT(datamat(:,[winshiftvec(winshiftstep):winshiftvec(winshiftstep)+(shiftcycle-1)]))); % time domain averaging for win file                        if plotflag           subplot(2,1,2), plot(1:4:shiftcycle*4, regressionMAT(datamat(:,[winshiftvec(winshiftstep):winshiftvec(winshiftstep)+(shiftcycle-1)]))'), title(['sliding window starting at ' num2str((winshiftvec(winshiftstep))*4)  ' ms ']), xlabel('time in milliseconds')           subplot(2,1,1), plot(1:4:shiftcycle*4, winmatsum'), title(['sum of sliding windows; number of shifts:' num2str(winshiftstep) ]), ylabel('microvolts')          %    subplot(3,1,3), hold on, circle([0,0],1,200,'-');          %    plot([0;(imag(fouriercomp(120)./tenHZampfft(120)))], [0;(real(fouriercomp(120)./tenHZampfft(120)))]);title('phase angle of window')            pause(.4)       end          %    movmat(index) = getframe(h)     end        winmat = winmatsum./length(winshiftvec);	%===========================================================	% 5. determine amplitude and Phase using fft of the winmat (i.e. the	% average	%===========================================================	% FFT of the average winmat	% 		NFFT = shiftcycle-1; %one cycle in sp of the desired frequency times 4 oscillations (-1)	NumUniquePts = ceil((NFFT+1)/2); 	fftMat = fft (winmat', (shiftcycle-1));  % transpose: channels as columns (fft columnwise)	Mag = abs(fftMat);                                                   % Amplitude berechnen	Mag = Mag*2;   		Mag(1) = Mag(1)/2;                                                    % DC trat aber nicht doppelt auf	if ~rem(NFFT,2),                                                    % Nyquist Frequenz (falls vorhanden) auch nicht doppelt        Mag(length(Mag))=Mag(length(Mag))/2;	end		Mag=Mag/NFFT;                                                         % FFT so skalieren, da? sie keine Funktion von NFFT ist        fftamp = [fftamp Mag((targetbin),:)'];                end % trials     % 	% 	%===========================================================% 	% 6. bestimmung der mittleren Amplitude mit diffferenz(max-min)% 	%===========================================================% 	% 	Phasevec = Phasevec';% 	tenHZampfft = tenHZampfft';% 	 	SaveAvgFile([FilePath '.STamp' ],fftamp,[],[],SampRate,[],[],EegMegStatus)%         % 	SaveAvgFile([FilePath '.win' ],winmat,NTrialAvgVec,[],SampRate,MedMedRawVec,MedMedAvgVec,EegMegStatus)%         % 	SaveAvgFile([FilePath '.pha' ],Phasevec,NTrialAvgVec,[],SampRate,MedMedRawVec,MedMedAvgVec,EegMegStatus)fclose('all') end % files