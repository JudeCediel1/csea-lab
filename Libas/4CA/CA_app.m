function[]  = CA_gestalt_tte();% function[]  = CA_app()%% Version fuer Gestalt erweiterte 1020er und Fp1 Fp2 d.h. 23 und 9,  d.h. ohne "ASCII" Methode%% Versuch mit grandmeans ueber alle Vp bevor differenzen gebildet werden% d.h. es muss das programm ca_get_phase2 benutzt werden%% Funktion zur Berechnung einer Kohaerenzanalyse ueber Elektroden% fuer ein bestimmten Band fO%% % Die Funktion berechnet die Kohaerenzanalyse% nach Rodriguez et al., 1999%% % VOR der Koharenzanalyse wird das EP subtrahiert%% eine Datei .coh mit den Kohaerenzmassen wir erzeugt. (Vgl. Spalte 1 und 2 dieser Matrix)% ausserdem wird eine Datei .coh.s mit Kohaerenzen geschuffelt ueber trials% (fuer die spaetere Bootstrapstatistik erzeugt)%% (c) gruber 1999 v.1.1 mit grandmean basis fuer analyse% (c)  Dr. rer soc. Keil und Dipl BA Gruber, 1999%                             NrTaperPoints = 50                                    AvgretransMat = [];vers_p = ['vp02.E1.app';'vp04.E1.app';'vp05.E1.app';'vp08.E1.app';'vp09.E1.app';'vp10.E1.app';'vp11.E1.app';'vp13.E1.app';'vp14.E1.app';'vp17.E1.app']bed = ['1';'5';'2';'6';'3';'7';'4';'8']% !! falls das erste zeichen die bed nicht identifiziert zeile 120 (speichern) anpassenFilePath = ['grubi_extern:Gest_apps_r4:']  % !! in diesem Pfad muss ein Pfad \temp fuer das ERP existierendisp('electrodes to analyze');% Electrodes   erweitertes 10-20er + fp1 unf fp2electrodes =  [9 11 23 25 34 37 46 48 54 58 60 65 67 68 69 71 76 78 80 82 84 86 91 95 97 99 105 109 122 124 129 ]   f0 = 245 % 60/0.2441 vorsicht: haengt von epochenlaenge und Fsamp ab. siehe wa_app% !!!!!! Einschalten sofern diese Dateien noch nicht erzeugt sind% Temporaer fuer alle files das ERP berechnen und speichern% insert compute ERP%for i = 1:size(bed,1) % for j = 1:size(vers_p,1)  %  sumdata = [];  %  file_name=[FilePath vers_p(j,:) bed(i,1)]   % [data,Version,LHeader,ScaleBins,NChan,NPointsold,NTrials,SampRate,ch_AvgRef]=ReadAppData(file_name);    %for erptrial = 1 : NTrials     %  [data]=ReadAppData(file_name, erptrial);      % if erptrial == 1       %   sumdata = data;       %else        % sumdata = data + sumdata;       %end    %end    %erpdata = sumdata ./ NTrials;    %disp('size EP');    %size(sumdata)        %speichern im Pfad \temp   % tempname = [FilePath 'temp:erp_' vers_p(j,:) bed(i,1) '.mat']    %eval(['save ' tempname ' erpdata -mat'])  %end;%end; %Schleife ueber subjects und Bedingungen um temporaere phasenfiles fuer jede Elektrode zu erzeugen%for nb = 1 : size(bed,1) % nb  %file_namen = []; % for nf = 1 : size(vers_p,1)  %    file_namen = [file_namen; [vers_p(nf,:) bed(nb,:)]]  %end;    %for pp = 1 : size(electrodes,2)   % NPointsold=Ca_getPhase(FilePath,file_namen,bed(nb,1),electrodes(pp), f0, NrTaperPoints);  %end;%end;  % !!!! falls dieses Part weggelassen wird muessen hier die NPointold definiert werden;NPointsold = 1750;%Schleife ueber Bedingungenfor nb = 1 : size(bed,1)  %Schleife ueber subjects um Matrix mit filenamen fuer die aktuelle Bed zu erzeugen  file_namen = [];  for nf = 1 : size(vers_p,1)      file_namen = [file_namen; [vers_p(nf,:) bed(nb,:)]]  end;     %schleife ueber vergleiche  dummycount = 2;  ResMat = [];  ResMat_s = [];  for dummy1 = 1 : length(electrodes)-1;              gm_name = [FilePath 'temp2:gmc_' num2str(electrodes(dummy1)) '_' bed(nb,:)]     eval(['load ' gm_name ' -mat']);      Catvalorcomplejo_1=Catvalorcomplejo_vps ./ abs(Catvalorcomplejo_vps);     Catvalorcomplejo_vps = [];      for dummy2 = dummycount : length(electrodes)                         gm_name = [FilePath 'temp2:gmc_' num2str(electrodes(dummy2)) '_' bed(nb,:)]       eval(['load ' gm_name ' -mat']);        Catvalorcomplejo_2=Catvalorcomplejo_vps ./ abs(Catvalorcomplejo_vps);       Catvalorcomplejo_vps = []; 	               gmNTrials = size(Catvalorcomplejo_2,1);       if dummy1 == 1 & dummy2 == 2         ResMat = [electrodes(dummy1) electrodes(dummy2) (abs(sum(Catvalorcomplejo_1(:, [1:NPointsold]) - Catvalorcomplejo_2(:, [1:NPointsold])))./ gmNTrials)];    	 else         ResMat = [ResMat; electrodes(dummy1) electrodes(dummy2) (abs(sum(Catvalorcomplejo_1(:, [1:NPointsold]) - Catvalorcomplejo_2(:, [1:NPointsold])))./ gmNTrials)];    	 end  whos       % Diesselbe Subtraktion wird nun nochmals fuer die spaetere Bootstrapstatistik       % fuer geschuffelte Trials und Zeitpunkte erzeugt       if dummy1 == 1 & dummy2 == 2         ResMat_s = [electrodes(dummy1) electrodes(dummy2) (abs(sum(Catvalorcomplejo_1(randperm(gmNTrials), randperm(NPointsold)) - Catvalorcomplejo_2(randperm(gmNTrials), randperm(NPointsold)))) ./ gmNTrials)];    	 else         ResMat_s = [ResMat_s; electrodes(dummy1) electrodes(dummy2) (abs(sum(Catvalorcomplejo_1(randperm(gmNTrials), randperm(NPointsold)) - Catvalorcomplejo_2(randperm(gmNTrials), randperm(NPointsold)))) ./ gmNTrials)];    	 end                                      end;    dummycount = dummycount + 1;     end; % Schleife ueber Vergleiche         % Speichern    file_name = [FilePath 'gm_r4_' bed(nb,1)]   eval(['save ' file_name '.coh ResMat -mat']);  eval(['save ' file_name '.coh.s ResMat_s -mat']);    end; % Schleife ueber Bedingungen