function [T1_dummy, SOA_dummy,position_trial_vec, T2_correct_vec, T2_dummy, korrektT1vec, T2_RT_vec, T1_stat, T2_hitrate, T2_RT] = get_log_abip2(infilepath)% tastencode 1 = ALTGR = wort% tastencode 2 = ALTGR = pseudowortfid = fopen(infilepath)% dummylinesdumline = fgetl(fid);dumline = fgetl(fid);dumline = fgetl(fid);dumline = fgetl(fid);dumline = fgetl(fid);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  line = 1;index = 1;			while line > 0				% read data				line = fgets(fid);				if isempty(str2num(line(1))), disp(['events found: ']), disp(eventnum), disp(['lines found: ']), disp(index-1), break, end		if line < 0, break, return, end				% segmentiere jede zeile nach tabs				trialnumseg = find(line == '	');				% event-tags				eventnum = str2num(line(1:trialnumseg(1)-1));				eventkind = line(trialnumseg(1)+1:trialnumseg(2)-1);				eventcateg = line(trialnumseg(2)+1:trialnumseg(3)-1);				eventtime(index) = str2num(line(trialnumseg(3)+1:trialnumseg(4)-1));						% denksport		%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%			% 1. suche nach allen trialendenden: ein bindestrich am ende von eventcateg, 				if length(eventcateg) > 2; 			if strcmp(eventcateg(length(eventcateg)), '-'), trialend_vec(index) = 1;			else trialend_vec(index) = 0;		    end	     end					if index == 1, trialend_vec(index) = 0; end					% 		if index>1% 					if trialend_vec(index) == 1 & trialend_vec(index-1) == 1,% 						trialend_vec(index) = 2;% 					end% 			% 			 		if trialend_vec(index-1) == 2 & trialend_vec(index) == 1,% 						trialend_vec(index-1) = 1; trialend_vec(index) = 2;% 					end% 					% 				% 			end% 							% abfragen fuer T1		if strcmp('T1_1', eventcateg), T1_dummy(index) = 1;		elseif strcmp('T1_2', eventcateg), T1_dummy(index) = 2;		elseif strcmp('T1_3', eventcateg), T1_dummy(index) = 3;		else T1_dummy(index) = 0;		end			% abfragen fuer SOA		if strcmp('SOA1', eventcateg), SOA_dummy(index) = 1;		elseif strcmp('SOA2', eventcateg), SOA_dummy(index) = 2;		elseif strcmp('SOA3', eventcateg), SOA_dummy(index) = 3;		else SOA_dummy(index) = 0;		end			% abfragen fuer T2s		if strcmp('T2_pleasant', eventcateg), T2_dummy(index) = 1;		elseif strcmp('T2_neutral', eventcateg), T2_dummy(index) = 2;		elseif strcmp('T2_unpleasant', eventcateg), T2_dummy(index) = 3;		elseif strcmp('T2_DD', eventcateg), T2_dummy(index) = 4;		else T2_dummy(index) = 0;		end			% abfragen fuer positionen	if length(eventcateg) > 2		if strcmp('1', eventcateg(length(eventcateg)-1)), position_dummy(index) = 1;		elseif strcmp('2', eventcateg(length(eventcateg)-1)), position_dummy(index) = 2;		elseif strcmp('3', eventcateg(length(eventcateg)-1)), position_dummy(index) = 3;		elseif strcmp('4', eventcateg(length(eventcateg)-1)), position_dummy(index) = 4;		elseif strcmp('5', eventcateg(length(eventcateg)-1)), position_dummy(index) = 5;		elseif strcmp('6', eventcateg(length(eventcateg)-1)), position_dummy(index) = 6;		elseif strcmp('7', eventcateg(length(eventcateg)-1)), position_dummy(index) = 7;		elseif strcmp('8', eventcateg(length(eventcateg)-1)), position_dummy(index) = 8;		elseif strcmp('9', eventcateg(length(eventcateg)-1)), position_dummy(index) = 9;		else  position_dummy(index) = -1;		end	end						% abfragen fuer mausklicks und buttons		if strcmp('0', eventcateg), response_dummy(index) = 0;		elseif strcmp('1', eventcateg), response_dummy(index) = 1;	    elseif strcmp('2', eventcateg), response_dummy(index) = 2;		elseif strcmp('3', eventcateg), response_dummy(index) = 3;		elseif strcmp('4', eventcateg), response_dummy(index) = 4;		else  response_dummy(index) = -1;		if length(eventcateg) > 3; 			if strcmp(eventcateg(1:3), 'hit'), response_dummy(index) = 10;			elseif strcmp(eventcateg(1:3), 'mis'), response_dummy(index) = 13;		    end		end				end			index = index + 1;			% for correctflag	end			eventtime = eventtime  ./ 10; % in millisekunden (statt mikrosec)	% 'offline denksport'	trialend_indices_vec = find(trialend_vec == 1);		disp('anzahl trialenden: ')	disp(length(trialend_indices_vec))		% gehe durch die trials und berechne das interessierende				for trialnum = 1 : length(trialend_indices_vec);								if trialnum == 1								     for eventindex = 1:trialend_indices_vec(1);					   					  % finde T1 art					  if T1_dummy(eventindex)>0, T1_trial_vec(trialnum) = T1_dummy(eventindex); end					  					  % finde SOA art					  if SOA_dummy(eventindex)>0, SOA_trial_vec(trialnum) = SOA_dummy(eventindex); end					  					  % finde T2 valenz					   if T2_dummy(eventindex)>0, T2_trial_vec(trialnum) = T2_dummy(eventindex); end					   					  % finde position					 	if position_dummy(eventindex)>0, position_trial_vec(trialnum) = position_dummy(eventindex); end					   					  			      end				   			  			  % T1 response				          if  response_dummy(trialend_indices_vec(1)-3) == T1_trial_vec(trialnum);					          korrektT1vec(trialnum) = T1_trial_vec(trialnum);				          else					          korrektT1vec(trialnum) = 0;				          end					  						  % T2 response correct ? 					      if response_dummy(trialend_indices_vec(1)) == 13; 							  T2_correct_vec(trialnum) = -1;						  elseif response_dummy(trialend_indices_vec(1)) == 10; 				          	   T2_correct_vec(trialnum) = 1;						   end						  % T2 response time ? 						  T2_RT_vec(trialnum) =  eventtime(trialend_indices_vec(trialnum)-1) - eventtime(trialend_indices_vec(trialnum)-2);						  						   % find position					 	   if position_dummy(eventindex)>0, position_trial_vec(trialnum) = position_dummy(eventindex), end			   				   else								for eventindex = trialend_indices_vec(trialnum-1):trialend_indices_vec(trialnum);												 % finde T1 art						 if T1_dummy(eventindex)>0, 	T1_trial_vec(trialnum) = T1_dummy(eventindex); end						 						 % finde SOA art					     if SOA_dummy(eventindex)>0, SOA_trial_vec(trialnum) = SOA_dummy(eventindex); end						 						 % finde T2 valenz					     if T2_dummy(eventindex)>0, T2_trial_vec(trialnum) = T2_dummy(eventindex); end						 						 						 % finde position					 	if position_dummy(eventindex)>0, position_trial_vec(trialnum) = position_dummy(eventindex); end						 								 % finde response auf T2% 								for subindex =  eventindex:trialend_indices_vec(trialnum)-2;% 								% 									if response_dummy(subindex)==0, T2_response_vec(trialnum) = eventtime(subindex) - eventtime(eventindex); break;% 									else T2_response_vec(trialnum) = 0;% 									end% 								end					  					end % for 								end % if									% T1 response					response_dummy(trialend_indices_vec(trialnum)-3); T1_trial_vec(trialnum);										if  response_dummy(trialend_indices_vec(trialnum)-3) == T1_trial_vec(trialnum);					   korrektT1_trial_vec(trialnum) = T1_trial_vec(trialnum);				    else					   korrektT1_trial_vec(trialnum) = 0;				    end			   						    					 % T2 reponse correct ? 					 					 if response_dummy(trialend_indices_vec(trialnum)) == 13; 							T2_correct_vec(trialnum) = -1; 				     elseif response_dummy(trialend_indices_vec(trialnum)) == 10; 				          	   T2_correct_vec(trialnum) = 1;				     end				 					 % T2 reponse time ? 					 T2_RT_vec(trialnum) =  eventtime(trialend_indices_vec(trialnum)-1) - eventtime(trialend_indices_vec(trialnum)-2);					 								end	%for trialnum					  							% statmat = [condition_vec' correctvec' RTvec'];%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% aus den trialvektoren statistikinfo berechnen:% indizes% einzelne IndizesSOA1_indices = find(SOA_trial_vec == 1);SOA2_indices = find(SOA_trial_vec == 2);SOA3_indices = find(SOA_trial_vec == 3);pos_1_indices = find(position_dummy == 1); pos_2_indices = find(position_dummy == 2); pos_3_indices = find(position_dummy == 3); pos_4_indices = find(position_dummy == 4); pos_5_indices = find(position_dummy == 5); pos_6_indices = find(position_dummy == 6); pos_7_indices = find(position_dummy == 7); pos_8_indices = find(position_dummy == 8); pos_9_indices = find(position_dummy == 9);T2_pleas_indices = find(T2_trial_vec == 1);T2_neutr_indices = find(T2_trial_vec == 2);T2_unplea_indices = find(T2_trial_vec == 3);T2_DD_indices = find(T2_trial_vec == 4);% verknuepfte indizes % kateg X lagple_lag1_indices = find(T2_trial_vec == 1 & SOA_trial_vec ==1);ntr_lag1_indices = find(T2_trial_vec == 2 & SOA_trial_vec ==1);upl_lag1_indices = find(T2_trial_vec == 3 & SOA_trial_vec ==1);DD_lag1_indices = find(T2_trial_vec == 4 & SOA_trial_vec ==1);ple_lag2_indices = find(T2_trial_vec == 1 & SOA_trial_vec ==2);ntr_lag2_indices = find(T2_trial_vec == 2 & SOA_trial_vec ==2);upl_lag2_indices = find(T2_trial_vec == 3 & SOA_trial_vec ==2);DD_lag2_indices = find(T2_trial_vec == 4 & SOA_trial_vec ==2);ple_lag3_indices = find(T2_trial_vec == 1 & SOA_trial_vec ==3);ntr_lag3_indices = find(T2_trial_vec == 2 & SOA_trial_vec ==3);upl_lag3_indices = find(T2_trial_vec == 3 & SOA_trial_vec ==3);DD_lag3_indices = find(T2_trial_vec == 4 & SOA_trial_vec ==3);% POSITION X kategple_pos1_indices = find(T2_trial_vec == 1 & position_trial_vec ==1);ple_pos2_indices = find(T2_trial_vec == 1 & position_trial_vec ==2); ple_pos3_indices = find(T2_trial_vec == 1 & position_trial_vec ==3); ple_pos4_indices = find(T2_trial_vec == 1 & position_trial_vec ==4);ple_pos6_indices = find(T2_trial_vec == 1 & position_trial_vec ==6);ple_pos7_indices = find(T2_trial_vec == 1 & position_trial_vec ==7);ple_pos8_indices = find(T2_trial_vec == 1 & position_trial_vec ==8);ple_pos9_indices = find(T2_trial_vec == 1 & position_trial_vec ==9);ntr_pos1_indices = find(T2_trial_vec == 2 & position_trial_vec ==1);ntr_pos2_indices = find(T2_trial_vec == 2 & position_trial_vec ==2);ntr_pos3_indices = find(T2_trial_vec == 2 & position_trial_vec ==3);ntr_pos4_indices = find(T2_trial_vec == 2 & position_trial_vec ==4);ntr_pos6_indices = find(T2_trial_vec == 2 & position_trial_vec ==6);ntr_pos7_indices = find(T2_trial_vec == 2 & position_trial_vec ==7);ntr_pos8_indices = find(T2_trial_vec == 2 & position_trial_vec ==8);ntr_pos9_indices = find(T2_trial_vec == 2 & position_trial_vec ==9);upl_pos1_indices = find(T2_trial_vec == 3 & position_trial_vec ==1);upl_pos2_indices = find(T2_trial_vec == 3 & position_trial_vec ==2);upl_pos3_indices = find(T2_trial_vec == 3 & position_trial_vec ==3);upl_pos4_indices = find(T2_trial_vec == 3 & position_trial_vec ==4);upl_pos6_indices = find(T2_trial_vec == 3 & position_trial_vec ==6);upl_pos7_indices = find(T2_trial_vec == 3 & position_trial_vec ==7);upl_pos8_indices = find(T2_trial_vec == 3 & position_trial_vec ==8);upl_pos9_indices = find(T2_trial_vec == 3 & position_trial_vec ==9);% T1 prozent Korrekttest1 = find(korrektT1_trial_vec(ple_lag1_indices)>0)test2 = korrektT1_trial_vec(ple_lag1_indices)T1correct_ple_lag1 = (length(find(korrektT1_trial_vec(ple_lag1_indices)>0)) / length(korrektT1_trial_vec(ple_lag1_indices))) .*100;T1correct_ntr_lag1 = (length(find(korrektT1_trial_vec(ntr_lag1_indices)>0)) / length(korrektT1_trial_vec(ntr_lag1_indices))) .*100;T1correct_upl_lag1 = (length(find(korrektT1_trial_vec(upl_lag1_indices)>0)) / length(korrektT1_trial_vec(upl_lag1_indices))) .*100;T1correct_DD_lag1 = (length(find(korrektT1_trial_vec(DD_lag1_indices)>0)) / length(korrektT1_trial_vec(DD_lag1_indices)))    .*100;T1correct_ple_lag2 = (length(find(korrektT1_trial_vec(ple_lag2_indices)>0)) / length(korrektT1_trial_vec(ple_lag2_indices))) .*100;T1correct_ntr_lag2 = (length(find(korrektT1_trial_vec(ntr_lag2_indices)>0)) / length(korrektT1_trial_vec(ntr_lag2_indices))) .*100;T1correct_upl_lag2 = (length(find(korrektT1_trial_vec(upl_lag2_indices)>0)) / length(korrektT1_trial_vec(upl_lag2_indices))) .*100;T1correct_DD_lag2 = (length(find(korrektT1_trial_vec(DD_lag2_indices)>0)) / length(korrektT1_trial_vec(DD_lag2_indices)))    .*100;T1correct_ple_lag3 = (length(find(korrektT1_trial_vec(ple_lag3_indices)>0)) / length(korrektT1_trial_vec(ple_lag3_indices))) .*100;T1correct_ntr_lag3 = (length(find(korrektT1_trial_vec(ntr_lag3_indices)>0)) / length(korrektT1_trial_vec(ntr_lag3_indices))) .*100;T1correct_upl_lag3 = (length(find(korrektT1_trial_vec(upl_lag3_indices)>0)) / length(korrektT1_trial_vec(upl_lag3_indices))) .*100;T1correct_DD_lag3 = (length(find(korrektT1_trial_vec(DD_lag3_indices)>0)) / length(korrektT1_trial_vec(DD_lag3_indices)))    .*100;T1_stat = [T1correct_ple_lag1 T1correct_ntr_lag1 T1correct_upl_lag1 T1correct_DD_lag1 T1correct_ple_lag2 T1correct_ntr_lag2 T1correct_upl_lag2 T1correct_DD_lag2 T1correct_ple_lag3 T1correct_ntr_lag3 T1correct_upl_lag3 T1correct_DD_lag3]% T2 reaction times for correct Rts > 150 < 5000 und korrekte T1 fuerr kateg X soaT2_RT_ple_lag1_indices = find(T2_RT_vec > 150 & T2_RT_vec < 10000 & SOA_trial_vec == 1 & T2_trial_vec == 1 & korrektT1_trial_vec > 0 & T2_correct_vec > 0);T2_RT_ntr_lag1_indices = find(T2_RT_vec >150 & T2_RT_vec < 10000& SOA_trial_vec == 1 & T2_trial_vec == 2 & korrektT1_trial_vec > 0 & T2_correct_vec > 0);T2_RT_upl_lag1_indices = find(T2_RT_vec >150 & T2_RT_vec < 10000& SOA_trial_vec == 1 & T2_trial_vec == 3 & korrektT1_trial_vec>0 & T2_correct_vec > 0);T2_RT_DD_lag1_indices = find(T2_RT_vec >150 & T2_RT_vec < 10000& SOA_trial_vec == 1 & T2_trial_vec == 4 & korrektT1_trial_vec>0 & T2_correct_vec > 0);T2_RT_ple_lag2_indices = find(T2_RT_vec > 150 & T2_RT_vec < 10000 & SOA_trial_vec == 2 & T2_trial_vec == 1 & korrektT1_trial_vec > 0 & T2_correct_vec > 0);T2_RT_ntr_lag2_indices = find(T2_RT_vec >150 & T2_RT_vec < 10000& SOA_trial_vec == 2 & T2_trial_vec == 2 & korrektT1_trial_vec > 0 & T2_correct_vec > 0);T2_RT_upl_lag2_indices = find(T2_RT_vec >150 & T2_RT_vec < 10000& SOA_trial_vec == 2 & T2_trial_vec == 3 & korrektT1_trial_vec > 0 & T2_correct_vec > 0);T2_RT_DD_lag2_indices = find(T2_RT_vec >150 & T2_RT_vec < 10000& SOA_trial_vec == 2 & T2_trial_vec == 4 & korrektT1_trial_vec > 0 & T2_correct_vec > 0);T2_RT_ple_lag3_indices = find(T2_RT_vec > 150 & T2_RT_vec < 10000 & SOA_trial_vec == 3 & T2_trial_vec == 1 & korrektT1_trial_vec > 0 & T2_correct_vec > 0);T2_RT_ntr_lag3_indices = find(T2_RT_vec >150 & T2_RT_vec < 10000& SOA_trial_vec == 3 & T2_trial_vec == 2 & korrektT1_trial_vec > 0 & T2_correct_vec > 0);T2_RT_upl_lag3_indices = find(T2_RT_vec >150 & T2_RT_vec < 10000& SOA_trial_vec == 3 & T2_trial_vec == 3 & korrektT1_trial_vec > 0 & T2_correct_vec > 0);T2_RT_DD_lag3_indices = find(T2_RT_vec >150 & T2_RT_vec < 10000& SOA_trial_vec == 3 & T2_trial_vec == 4 & korrektT1_trial_vec > 0 & T2_correct_vec > 0);% median davonT2_RT_ple_lag1 = median(T2_RT_vec(T2_RT_ple_lag1_indices));T2_RT_ntr_lag1 = median(T2_RT_vec(T2_RT_ntr_lag1_indices));T2_RT_upl_lag1 = median(T2_RT_vec(T2_RT_upl_lag1_indices));T2_RT_DD_lag1 = median(T2_RT_vec(T2_RT_DD_lag1_indices));T2_RT_ple_lag2 = median(T2_RT_vec(T2_RT_ple_lag2_indices));T2_RT_ntr_lag2 = median(T2_RT_vec(T2_RT_ntr_lag2_indices));T2_RT_upl_lag2 = median(T2_RT_vec(T2_RT_upl_lag2_indices));T2_RT_DD_lag2 = median(T2_RT_vec(T2_RT_DD_lag2_indices));T2_RT_ple_lag3 = median(T2_RT_vec(T2_RT_ple_lag3_indices));T2_RT_ntr_lag3 = median(T2_RT_vec(T2_RT_ntr_lag3_indices));T2_RT_upl_lag3 = median(T2_RT_vec(T2_RT_upl_lag3_indices));T2_RT_DD_lag3 = median(T2_RT_vec(T2_RT_DD_lag3_indices));% korrekte positionsdings% T2 reaction times for correct Rts > 150 < 5000 und korrekte T1 fuer position und KATegoryT2_RT_pos1_ple_indices = find(T2_RT_vec > 150 & T2_RT_vec < 10000 &  position_trial_vec == 1 & T2_trial_vec == 1 & korrektT1_trial_vec > 0 & T2_correct_vec > 0);T2_RT_pos1_ntr_indices = find(T2_RT_vec > 150 & T2_RT_vec < 10000 &  position_trial_vec == 1 & T2_trial_vec == 2 & korrektT1_trial_vec > 0 & T2_correct_vec > 0);T2_RT_pos1_upl_indices = find(T2_RT_vec > 150 & T2_RT_vec < 10000 &  position_trial_vec == 1 & T2_trial_vec == 3 & korrektT1_trial_vec > 0 & T2_correct_vec > 0);T2_RT_pos1_ple_indices = find(T2_RT_vec > 150 & T2_RT_vec < 10000 &  position_trial_vec == 2 & T2_trial_vec == 1 & korrektT1_trial_vec > 0 & T2_correct_vec > 0);T2_RT_pos1_ntr_indices = find(T2_RT_vec > 150 & T2_RT_vec < 10000 &  position_trial_vec == 2 & T2_trial_vec == 2 & korrektT1_trial_vec > 0 & T2_correct_vec > 0);T2_RT_pos1_upl_indices = find(T2_RT_vec > 150 & T2_RT_vec < 10000 &  position_trial_vec == 2 & T2_trial_vec == 3 & korrektT1_trial_vec > 0 & T2_correct_vec > 0);T2_RT_pos1_ple_indices = find(T2_RT_vec > 150 & T2_RT_vec < 10000 &  position_trial_vec == 3 & T2_trial_vec == 1 & korrektT1_trial_vec > 0 & T2_correct_vec > 0);T2_RT_pos1_ntr_indices = find(T2_RT_vec > 150 & T2_RT_vec < 10000 &  position_trial_vec == 3 & T2_trial_vec == 2 & korrektT1_trial_vec > 0 & T2_correct_vec > 0);T2_RT_pos1_upl_indices = find(T2_RT_vec > 150 & T2_RT_vec < 10000 &  position_trial_vec == 3 & T2_trial_vec == 3 & korrektT1_trial_vec > 0 & T2_correct_vec > 0);T2_RT_pos1_ple_indices = find(T2_RT_vec > 150 & T2_RT_vec < 10000 &  position_trial_vec == 4 & T2_trial_vec == 1 & korrektT1_trial_vec > 0 & T2_correct_vec > 0);T2_RT_pos1_ntr_indices = find(T2_RT_vec > 150 & T2_RT_vec < 10000 &  position_trial_vec == 4 & T2_trial_vec == 2 & korrektT1_trial_vec > 0 & T2_correct_vec > 0);T2_RT_pos1_upl_indices = find(T2_RT_vec > 150 & T2_RT_vec < 10000 &  position_trial_vec == 4 & T2_trial_vec == 3 & korrektT1_trial_vec > 0 & T2_correct_vec > 0);T2_RT_pos1_ple_indices = find(T2_RT_vec > 150 & T2_RT_vec < 10000 &  position_trial_vec == 6 & T2_trial_vec == 1 & korrektT1_trial_vec > 0 & T2_correct_vec > 0);T2_RT_pos1_ntr_indices = find(T2_RT_vec > 150 & T2_RT_vec < 10000 &  position_trial_vec == 6 & T2_trial_vec == 2 & korrektT1_trial_vec > 0 & T2_correct_vec > 0);T2_RT_pos1_upl_indices = find(T2_RT_vec > 150 & T2_RT_vec < 10000 &  position_trial_vec == 6 & T2_trial_vec == 3 & korrektT1_trial_vec > 0 & T2_correct_vec > 0);T2_RT_pos1_ple_indices = find(T2_RT_vec > 150 & T2_RT_vec < 10000 &  position_trial_vec == 7 & T2_trial_vec == 1 & korrektT1_trial_vec > 0 & T2_correct_vec > 0);T2_RT_pos1_ntr_indices = find(T2_RT_vec > 150 & T2_RT_vec < 10000 &  position_trial_vec == 7 & T2_trial_vec == 2 & korrektT1_trial_vec > 0 & T2_correct_vec > 0);T2_RT_pos1_upl_indices = find(T2_RT_vec > 150 & T2_RT_vec < 10000 &  position_trial_vec == 7 & T2_trial_vec == 3 & korrektT1_trial_vec > 0 & T2_correct_vec > 0);T2_RT_pos1_ple_indices = find(T2_RT_vec > 150 & T2_RT_vec < 10000 &  position_trial_vec == 8 & T2_trial_vec == 1 & korrektT1_trial_vec > 0 & T2_correct_vec > 0);T2_RT_pos1_ntr_indices = find(T2_RT_vec > 150 & T2_RT_vec < 10000 &  position_trial_vec == 8 & T2_trial_vec == 2 & korrektT1_trial_vec > 0 & T2_correct_vec > 0);T2_RT_pos1_upl_indices = find(T2_RT_vec > 150 & T2_RT_vec < 10000 &  position_trial_vec == 8 & T2_trial_vec == 3 & korrektT1_trial_vec > 0 & T2_correct_vec > 0);T2_RT_pos1_ple_indices = find(T2_RT_vec > 150 & T2_RT_vec < 10000 &  position_trial_vec == 9 & T2_trial_vec == 1 & korrektT1_trial_vec > 0 & T2_correct_vec > 0);T2_RT_pos1_ntr_indices = find(T2_RT_vec > 150 & T2_RT_vec < 10000 &  position_trial_vec == 9 & T2_trial_vec == 2 & korrektT1_trial_vec > 0 & T2_correct_vec > 0);T2_RT_pos1_upl_indices = find(T2_RT_vec > 150 & T2_RT_vec < 10000 &  position_trial_vec == 9 & T2_trial_vec == 3 & korrektT1_trial_vec > 0 & T2_correct_vec > 0);% testhistvec ==> zur kontrolle der verteilung% hist (T2_RT_vec(T2_RT_upl_lag1_indices))% testhistvec = T2_RT_vec(T2_RT_upl_lag1_indices);% title('RT unpleasant')T2_RT = [T2_RT_ple_lag1 T2_RT_ntr_lag1 T2_RT_upl_lag1 T2_RT_DD_lag1 T2_RT_ple_lag2 T2_RT_ntr_lag2 T2_RT_upl_lag2 T2_RT_DD_lag2 T2_RT_ple_lag3 T2_RT_ntr_lag3 T2_RT_upl_lag3 T2_RT_DD_lag3]% Prozent T2 hits for Rts > 150 < 10000 und korrekte T1  : hier obige length(index einfuegen) nach SOA und kategorylength(T2_RT_upl_lag1_indices)length(T2_RT_vec(upl_lag1_indices))T2hitrate_ple_lag1 = (length(T2_RT_ple_lag1_indices) / length(T2_RT_vec(ple_lag1_indices))) .*100;T2hitrate_ntr_lag1 = (length(T2_RT_ntr_lag1_indices) / length(T2_RT_vec(ntr_lag1_indices))) .*100;T2hitrate_upl_lag1 = (length(T2_RT_upl_lag1_indices) / length(T2_RT_vec(upl_lag1_indices))) .*100;T2hitrate_DD_lag1 =  (length(find(T2_RT_vec(DD_lag1_indices)>0 & korrektT1_trial_vec(DD_lag1_indices) > 0)) / length(T2_RT_vec(DD_lag1_indices))) .*100;T2hitrate_ple_lag2 = (length(T2_RT_ple_lag2_indices) / length(T2_RT_vec(ple_lag2_indices))) .*100;T2hitrate_ntr_lag2 = (length(T2_RT_ntr_lag2_indices) / length(T2_RT_vec(ntr_lag2_indices))) .*100;T2hitrate_upl_lag2 = (length(T2_RT_upl_lag2_indices) / length(T2_RT_vec(upl_lag2_indices))) .*100;T2hitrate_DD_lag2 =  (length(find(T2_RT_vec(DD_lag2_indices)>0 & korrektT1_trial_vec(DD_lag2_indices) > 0)) / length(T2_RT_vec(DD_lag2_indices))) *100;T2hitrate_ple_lag3 = (length(T2_RT_ple_lag3_indices) / length(T2_RT_vec(ple_lag3_indices))) .*100;T2hitrate_ntr_lag3 = (length(T2_RT_ntr_lag3_indices) / length(T2_RT_vec(ntr_lag3_indices))) .*100;T2hitrate_upl_lag3 = (length(T2_RT_upl_lag3_indices) / length(T2_RT_vec(upl_lag3_indices))) .*100;T2hitrate_DD_lag3 =  (length(find(T2_RT_vec(DD_lag3_indices)>0 & korrektT1_trial_vec(DD_lag3_indices) > 0)) / length(T2_RT_vec(DD_lag3_indices))) .*100;T2_hitrate = [T2hitrate_ple_lag1 T2hitrate_ntr_lag1 T2hitrate_upl_lag1 T2hitrate_DD_lag1 T2hitrate_ple_lag2 T2hitrate_ntr_lag2 T2hitrate_upl_lag2 T2hitrate_DD_lag2 T2hitrate_ple_lag3 T2hitrate_ntr_lag3 T2hitrate_upl_lag3 T2hitrate_DD_lag3]% Prozent T2 hits for Rts > 150 < 10000 und korrekte T1  FUER POSITIONEN und KATEGORIEN, OHNE SOA%T2hitrate_ple_pos1 = (length(T2_RT_pos1_ple_indices) / length(T2_RT_vec(ple_pos1_indices))) .*100;%T2hitrate_ntr_pos1 = (length(T2_RT_pos1_ntr_indices) / length(T2_RT_vec(ntr_pos1_indices))) .*100;%T2hitrate_upl_pos1 = (length(T2_RT_pos1_upl_indices) / length(T2_RT_vec(upl_pos1_indices))) .*100;%T2hitrate_ple_pos2 = (length(T2_RT_pos2_ple_indices) / length(T2_RT_vec(ple_pos2_indices))) .*100;%T2hitrate_ntr_pos2 = (length(T2_RT_pos2_ntr_indices) / length(T2_RT_vec(ntr_pos2_indices))) .*100;%T2hitrate_upl_pos2 = (length(T2_RT_pos2_upl_indices) / length(T2_RT_vec(upl_pos2_indices))) .*100;%T2hitrate_ple_pos3 = (length(T2_RT_pos3_ple_indices) / length(T2_RT_vec(ple_pos3_indices))) .*100;%T2hitrate_ntr_pos3 = (length(T2_RT_pos3_ntr_indices) / length(T2_RT_vec(ntr_pos3_indices))) .*100;%T2hitrate_upl_pos3 = (length(T2_RT_pos3_upl_indices) / length(T2_RT_vec(upl_pos3_indices))) .*100;%T2hitrate_ple_pos4 = (length(T2_RT_pos4_ple_indices) / length(T2_RT_vec(ple_pos4_indices))) .*100;%T2hitrate_ntr_pos4 = (length(T2_RT_pos4_ntr_indices) / length(T2_RT_vec(ntr_pos4_indices))) .*100;%T2hitrate_upl_pos4 = (length(T2_RT_pos4_upl_indices) / length(T2_RT_vec(upl_pos4_indices))) .*100;%T2hitrate_ple_pos6 = (length(T2_RT_pos6_ple_indices) / length(T2_RT_vec(ple_pos6_indices))) .*100;%T2hitrate_ntr_pos6 = (length(T2_RT_pos6_ntr_indices) / length(T2_RT_vec(ntr_pos6_indices))) .*100;%T2hitrate_upl_pos6 = (length(T2_RT_pos6_upl_indices) / length(T2_RT_vec(upl_pos6_indices))) .*100;%T2hitrate_ple_pos7 = (length(T2_RT_pos7_ple_indices) / length(T2_RT_vec(ple_pos7_indices))) .*100;%T2hitrate_ntr_pos7 = (length(T2_RT_pos7_ntr_indices) / length(T2_RT_vec(ntr_pos7_indices))) .*100;%T2hitrate_upl_pos7 = (length(T2_RT_pos7_upl_indices) / length(T2_RT_vec(upl_pos7_indices))) .*100;%T2hitrate_ple_pos8 = (length(T2_RT_pos8_ple_indices) / length(T2_RT_vec(ple_pos8_indices))) .*100;%T2hitrate_ntr_pos8 = (length(T2_RT_pos8_ntr_indices) / length(T2_RT_vec(ntr_pos8_indices))) .*100;%T2hitrate_upl_pos8 = (length(T2_RT_pos8_upl_indices) / length(T2_RT_vec(upl_pos8_indices))) .*100;%T2hitrate_ple_pos9 = (length(T2_RT_pos9_ple_indices) / length(T2_RT_vec(ple_pos9_indices))) .*100;%T2hitrate_ntr_pos9 = (length(T2_RT_pos9_ntr_indices) / length(T2_RT_vec(ntr_pos9_indices))) .*100;%T2hitrate_upl_pos9 = (length(T2_RT_pos9_upl_indices) / length(T2_RT_vec(upl_pos9_indices))) .*100;eval(['save ' infilepath '.T1_stat T1_stat -ascii'])eval(['save ' infilepath '.T2_RT T2_RT -ascii'])eval(['save ' infilepath '.T2_hits T2_hitrate -ascii'])fclose('all')