% lfdmat1: Leadfield-Matrix fuer Sensor- und Dipolkonfiguration% regpar: Regularisierungsparameter ("je groesser, desto glatter", Erfahrungswert (64 Elektroden): 0.001 (aber Vorsicht!)% pathname: Pfadname fuer *.avr-Datei% namelist: Liste mit *.avr-Dateien (mit Endung!), z.B.: namelist = char('dat1.avr', 'dat2.avr')% pathout: Ausgabepfad, Dateinamen bestehen aus ersten drei Buchstaben der namelist-Namen, +mn[1,2,3...] (oder mnrad[1,2,3...])% elplist: Auszuschliessende Elektroden, z.B. elplist = [44, 61], oder elplist=''% from, to: Zu bearbeitende Spalten der Datenmatrix, falls alle bearbeitet werden sollen: '', ''% out_flag: 'abs'=>Betraege der Dipolmomente (>0), 'rad'=>Radialteile der Dipolmomentefunction [diploc, lfdmat, data, G, invsol, paths, names] = invmap_list(lfdmat1, regpar, paths, names, pathout, elplist, from, to, out_flag);if nargin==0,   disp(' [diploc, lfdmat, data, G, invsol, paths, names] = invmap_list(lfdmat1, regpar, paths, names, pathout, elplist, from, to, out_flag); ');   return;end;isfrom = 1;if isempty(from),   isfrom=0;end;if isempty(names),   [namelist, names, paths] = read_filelist('*.avr');   nr_names = length(namelist(:,1));else   nr_names = length(names(:,1));   for i=1:nr_names,      namelist(i,1:length(names(i,:))+length(paths(i,:))) = sprintf('%s%s', paths(i,:), names(i,:));   end;end;disp('');disp(' Reading in data, average referencing');disp('');disp(namelist(1,:));[matrix, latencies] = read_avr(deblank(namelist(1,:)));[m(1) n(1)] = size(matrix);nr_electrodes = 0;for i=1:m(1),	pruef = 0;	for j=1:length(elplist),		if elplist(j)==i,			pruef = 1;			break;		end;	end;	if pruef==0,		nr_electrodes = nr_electrodes + 1;		arg(nr_electrodes) = i;	end;end;text = sprintf('Number of electrodes to be included in the following procedure: %d', nr_electrodes);disp(text);if isfrom==0, from=1; to=n(1); end;n(1) = to-from+1;data(:,1:n(1), 1) =  matrix(arg,from:to);data(:,1:n(1), 1) = avg_ref(data(:,1:n(1), 1));disp(m(1));for i=2:nr_names,				% Reading in additional files	disp(namelist(i,:));   [matrix, latencies] = read_avr(deblank(namelist(i,:)));   [m(i) n(i)] = size(matrix);    if isfrom==0, from=1; to=n(i); end;   n(i) = to-from+1;   data(:,1:n(i), i) =  matrix(arg,from:to);	data(:,1:n(i), i) = avg_ref(data(:,1:n(i), i));	disp(m(i));end;disp('');disp(' Reading dipole locations (diploc) ');disp('');diploc = read_matrix(1384, 4, 'c:\users\Andreas\leadfield\diploc_sph_08_02_01_-06.dat');diploc = diploc';if isempty(lfdmat1),   disp('');   disp(' Reading leadfield matrix (lfdmat) ');   disp('');	lfdmat = read_matrix(4152, 21, 'c:\Matlab\analysis\elp\lead21_pol_08_02_01_-06.dat');	lfdmat = lfdmat';	disp(size(lfdmat));end;if nr_electrodes~=length(lfdmat1(:,1)),   disp('');   disp(' Resizing and reaveragereferencing leadfield matrix ');   disp('');   lfdmat = lfdmat1(arg,:);   lfdmat = avg_ref(lfdmat);else   lfdmat = lfdmat1;end;    disp('');disp(' Computing pseudoinverse (G) ');disp('');G = pinv_tikh(lfdmat, regpar);disp(size(G));disp('');disp(' Computing residual variances ');disp('');nsum = 0;sumvar = 0;for i=1:nr_names,   inv = G*data(1:nr_electrodes,1:n(i),i);   variances = res_var(lfdmat, inv, data(1:nr_electrodes,1:n(i),i))';   minvar(i) = min(variances);   maxvar(i) = max(variances);   sumvar(i) = sum(variances);   nsum = nsum+n(i);   text = sprintf('Min: %f   Max: %f   Mean: %f', minvar(i), maxvar(i), sumvar(i)/n(i));   disp(text);   clear inv;end;text = sprintf('Over all:    Min: %f   Max: %f   Mean: %f', min(minvar), max(maxvar), sum(sumvar)/nsum); disp(text);[q, r] = when_changes_radius(diploc(1:3,:), 0.001);disp('');disp('Computing and writing inverse solutions (invsol)');disp('');   dim = 3;	for i=1:nr_names,      if strcmp(out_flag, 'abs'),         invsol(:,1:n(i),i) =  inv_recon(G, data(1:nr_electrodes,1:n(i),i), dim);		% Modulo (Intensity map)      end;      if strcmp(out_flag, 'rad'),      	invsol(:,1:n(i),i) = G(3:3:4152,:)*data(1:nr_electrodes,1:n(i),i);			% Radial component      end;      for j=1:length(q),         if strcmp(out_flag, 'abs'),				filename = sprintf('%s\\%smn%d.avr', pathout, names(i,1:3), j);      	end;      	if strcmp(out_flag, 'rad'),				filename = sprintf('%s\\%smnrad%d.avr', pathout, names(i,1:3), j);      	end;			disp(filename);	      fid = fopen(filename, 'w');	      if j==1,	         write_avr(invsol(1:q(1), 1:n(i), i), filename, 1, 1);	      elseif j==length(q),	         write_avr(invsol(q(j-1)+1:length(diploc(1,:)), 1:n(i), i), filename, 1, 1);	      else	         write_avr(invsol(q(j-1)+1:q(j), 1:n(i), i), filename, 1, 1);         end;		end;			% j   end;		% i      