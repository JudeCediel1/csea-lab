% Compute centres of gravity for CNV potential distributions which are given as rows in different files% COGs are computed in cartesian coordinates, but can be output in spherical coordinates (theta/phi) if an (arbitrary) argument is given% coor_flag=='sph' means output in polar coordinates, pathname contains the path with files, namelist the list of filenames to be used% elplist contains electrode number to be excluded (e.g. virtual eye channels!)function [elpsph, elpxyz, data, cntr_grav, meangrav] = center_grav_cnv_xyzsph(coor_flag, pathname, namelist, elplist);if nargin==0,   disp(' [elpsph, elpxyz, data, cntr_grav, meangrav] = center_grav_cnv_xyzsph(coor_flag, pathname, namelist, elplist); ');   return;end;max_electrodes = 29;				% Number of electrodes in the files (number of columns), also includes virtual eye electrodes!nr_names = length(namelist(:,1));disp('Reading in data, average referencing');name = sprintf('%s\\%s', pathname, namelist(1,:));disp(name);[matrix, latencies] = read_avr(name);TSB(1) = latencies(1);if length(latencies)>1, DI(1)=latencies(2)-latencies(1); else DI(1)=1; end;[m(1) n(1)] = size(matrix);disp(' Determine valid electrodes to be included in the following procedure');nr_electrodes = 0;for i=1:m(1),	pruef = 0;	for j=1:length(elplist),		if elplist(j)==i,			pruef = 1;			break;		end;	end;	if pruef==0,		nr_electrodes = nr_electrodes + 1;		arg(nr_electrodes) = i;	end;end;nr_electrodesdata(:,1:n(1), 1) =  matrix(arg,:);data(:,1:n(1), 1) = avg_ref(data(:,1:n(1), 1));for i=2:nr_names,				% Reading in additional files	name = sprintf('%s\\%s', pathname, namelist(i,:));	disp(name);   [matrix, latencies] = read_avr(name);   TSB(i) = latencies(1);   if length(latencies)>1, DI(i)=latencies(2)-latencies(1); else DI(i)=1; end;   [m(i) n(i)] = size(matrix);    data(:,1:n(i), i) =  matrix(arg,:);	data(:,1:n(i), i) = avg_ref(data(:,1:n(i), i));	m(i)end;colours = char('r', 'b', 'g', 'm', 'c', 'y', 'b', 'w');if nr_names>length(colours),	disp('Not enough colours for all files! (cnv_pca)');end;disp('Reading in electrode locations');elpsph = read_elp('c:\Matlab\analysis\elp\26.elp');q = length(elpsph(1,:));elpxyz = elp2coor(elpsph(:,arg), 1.0);%elpsph(:,q+1:max_electrodes) = 0;		% "Filling in" virtual electrodes (e.g. virtual eye channels)%elpxyz(:,q+1:max_electrodes) = 0;disp('Computing centres of gravity for potentials in cartesian coordinates');for i=1:nr_names,	cntr_grav(:,1:n(i),i) = center_grav(elpxyz,data(:,1:n(i),i));end;	disp('Computing mean over subjects');for i=1:nr_names,	meangrav(:,i) = mean(cntr_grav(:,1:n(i),i), 2);end; if strcmp(coor_flag, 'sph'),	disp('Computing polar coordinates of centres and means');	for i=1:nr_names,		cntr_grav_sph(:,1:n(i),i) = cart2polar(cntr_grav(:,1:n(i),i));		meangrav_sph(:,i) = cart2polar(meangrav(:,i));	end;end;disp('Plotting');clf;if strcmp(coor_flag, 'sph'),	for i=1:nr_names,		if i<length(colours),			c = sprintf('%sx', colours(i));		else			c = 'bx';		end;		plot(cntr_grav_sph(1,1:n(i),i), cntr_grav_sph(2,1:n(i),i), c); hold on;	end;	legend(namelist(:,1:3), 1);  hold on;	for i=1:nr_names,		if i<length(colours),			c = sprintf('%so', colours(i));		else			c = 'bo';		end;		plot(meangrav_sph(1,i), meangrav_sph(2,i),c); hold on;	end;	xlabel('Theta'); ylabel('Phi');	title('Schwerpunkte der Potentialverteilungen in Polarkoordinaten');else,	for i=1:nr_names,		if i<length(colours),			c = sprintf('%sx', colours(i));		else			c = 'bx';		end;		plot(cntr_grav(1,1:n(i),i), cntr_grav(2,1:n(i),i), c); hold on;	end;	legend(namelist(:,1:3), 1);  hold on;	for i=1:nr_names,		if i<length(colours),			c = sprintf('%so', colours(i));		else			c = 'bo';		end;		plot(meangrav(1,i), meangrav(2,i),c); hold on;	end;	xlabel('x'); ylabel('y');	title('Schwerpunkte der Potentialverteilungen');end;% disp('Print to file');% print -dmfile MadMac:matlab:data:aphasie:pictures:centr_grav_sph26;% print -depsc MadMac:matlab:data:aphasie:pictures:centr_grav_sph26.eps;