function [correlations, paths, names] = correlate_2(paths, names, elplist, format, nameout, chars);if nargin==0,   disp(' [correlations, paths, names] = correlate_2(paths, names, elplist, format, nameout, chars); ');   return;end;if isempty(names),   if strcmp(format, 'avr'), ending = '*.avr'; end;	if strcmp(format, 'mfxtxt'), ending = '*.asc'; end;   [namelist, names, paths] = read_filelist(ending);   nr_names = length(namelist(:,1));else   nr_names = length(names(:,1));   for i=1:nr_names,      namelist(i,1:length(deblank(names(i,:)))+length(deblank(paths(i,:)))) = sprintf('%s%s', deblank(paths(i,:)), deblank(names(i,:)));   end;end;namelist[data, m, n, latencies] = read_data(namelist, elplist, format);[nr_names x] = size(namelist);if mod(nr_names, 2)~=0,   disp(' Number of filenames is not even!!! (correlate_2) ');   return;end;cnt=1;for i=1:2:nr_names,   correlations(1:n(i),cnt) = correl_columns(data(1:m(i),1:n(i),i),data(1:m(i+1),1:n(i+1),i+1));    cnt = cnt+1;end;colours = char('r', 'b', 'g', 'm', 'c', 'y', 'b', 'w');if nr_names>length(colours),	disp('Not enough colours for all files! (correl_2.m)');end;for i=1:nr_names/2,	if i<length(colours),		c = colours(i);	else		c = 'k';	end;	plot(latencies(i,:), correlations(:,i), c); hold on;end;legend(names(1:2:nr_names,1:chars), 1);  hold on;axis([min(min(latencies))  max(max(latencies))  -1  1]);xlabel('Latenz');ylabel('Correlation');title('Correlation between topographies over time');if ~isempty(nameout),   write_matrix(correlations, nameout);end;