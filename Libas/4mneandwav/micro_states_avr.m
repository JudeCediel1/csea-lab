function micro_states_avr(filelist, off_channels, time_begin, time_end, residual, norm_flag, SNR_parameters);if nargin==0,   disp(' micro_states_avr(filelist, off_channels, time_begin, time_end, residual, norm_flag, SNR_parameters); ');   return;end;if isempty(filelist),   [filelist, names, paths] = read_filelist('*.avr');end;if ~isempty(SNR_parameters),   time_begin_read = SNR_parameters(2);else,   time_begin_read = time_begin;end;SNR_param_elem(1) = SNR_parameters(1);for i=1:length(filelist(:,1)),   [data, m, n, latencies] = read_data(filelist(i,:), off_channels, 'avr', time_begin_read, time_end);   [tmp, SNR_param_elem(2)] = min(abs(latencies(1:n)-SNR_parameters(2)));   [tmp, SNR_param_elem(3)] = min(abs(latencies(1:n)-SNR_parameters(3)));   [tmp, elem_begin] = min(abs(latencies(1:n)-time_begin));   disp('Compute microstates');   disp(filelist(i,:));   [stateselem, statestopo, states_SNR, states_rms] = micro_states(data(1:m,1:n), elem_begin, residual, norm_flag, SNR_param_elem);   states_lat(1,1:length(stateselem(1,:))) = latencies(stateselem(1,:));   states_lat(2,1:length(stateselem(2,:))) = latencies(stateselem(2,:));   disp('Output microstates');   name = strtok(filelist(i,:), '.');   out_name_topo = sprintf('%s_ms.avr', name);   write_avr(statestopo, out_name_topo, 1, 1);   out_name_lat = sprintf('%s_ms.lat', name);   disp('Output microstates');   write_matrix([states_lat' states_SNR' states_rms'], out_name_lat);   clear states_lat, states_SNR, states_rms, statestopo, data;end;