%Minimum-Norm speziell fuer MEG (inklusive Leadfield-Matrix Berechunung)function [lfdmat] = mn_MEG_batch(sensor_name, cos_name, paths, names, lfdmat, pathout, from, to, off_sensors, regpar);if nargin==0,   disp(' [lfdmat] = mn_MEG_batch(sensor_name, cos_name, paths, names, lfdmat, pathout, from, to, off_sensors, regpar); ');   return;end;disp('Read output locations');% Reading locations selected for output% there are 4 sizes available%output_locations = read_matrix(350, 3, '/home/assadoll/Programme/MN/shell1.dat')';	%output_locations = read_matrix(197, 3, '/home/assadoll/Programme/MN/symshells/197xyzsy.dat')';%output_locations = read_matrix(87, 3, '/home/assadoll/Programme/MN/shell3.dat')';%output_locations = read_matrix(21, 3, '/home/assadoll/Programme/MN/shell4.dat')';output_locations = '';disp('Read dipole locations');%dipole_locations = read_matrix(655, 4, '/home/assadoll/Programme/MN/dipoles.dat')';		% Reading dipole locations%dipole_locations = read_matrix(655, 3, '/home/assadoll/Programme/MN/dipoles_symmetric2.dat')';		% Reading dipole locations symmteric/10dipole_locations = read_matrix(655, 3, '/home/assadoll/Programme/MN/diploc_sym1.dat')';		% Reading dipole locations symmteric/10dipole_locations = dipole_locations * 10; % if symmetric then *10 else not!if isempty(lfdmat),	disp('Read sensors');	[sensors, name, pathname, filename] = read_pmg(sensor_name);		% Read sensors from *.pmg-file	sensors(1:3,:) = sensors(1:3,:)*100;				% Convert in cm   disp('Read centre of sphere ');   	[centre_of_sphere]=dlmread(cos_name, ',')			% Read center of sphere (x y z)	centre_of_sphere = 100*centre_of_sphere;			% Convert into cm	disp('Compute leadfield matrix');   [lfdmat, orientations, v] = compute_lfdmat(dipole_locations(1:3,:), sensors, 'MEG', 'sph', centre_of_sphere);	% Compute leadfield matrix (forward solutions)   lfdmat = avg_ref(lfdmat);   end;% Compute and output minimum norm solutionsdisp('Compute minimum norm solution');% invmap_reduce_find_regpar(lfdmat, 2, dipole_locations, regpar, paths, names, 'avr', pathout, off_sensors, output_locations, from, to, 'abs');invmap_reduce_find_regpar(lfdmat, 2, dipole_locations, 50, paths, names, 'avr', pathout, off_sensors, output_locations, from, to, 'abs','050');invmap_reduce_find_regpar(lfdmat, 2, dipole_locations, 100, paths, names, 'avr', pathout, off_sensors, output_locations, from, to, 'abs','100');