  function [data, correl, rmsvec, paths, names] = laterality(paths, names, format, elplist, from, to, metric, nameout);if nargin==0,   disp(' [data, correl, rms, paths, names] = laterality(paths, names, format, elplist, from, to, metric, nameout); ');   return;end;if isempty(names),   if strcmp(format, 'avr'), ending = '*.avr'; end;	if strcmp(format, 'mfxtxt'), ending = '*.asc'; end;   [namelist, names, paths] = read_filelist(ending);   nr_names = length(namelist(:,1));else   nr_names = length(names(:,1));   for i=1:nr_names,      namelist(i,1:length(deblank(names(i,:)))+length(deblank(paths(i,:)))) = sprintf('%s%s', deblank(paths(i,:)), deblank(names(i,:)));   end;end;namelist[data, m, n, latencies] = read_data(namelist, elplist, format, from, to);% Define labels and titles for subplotslabels(1) = 1;titles(1,:) = names(1,2:3);for i=2:nr_names,   if paths(i,:)==paths(i-1,:),      labels(i) = labels(i-1);   else,      titles(length(titles(:,1))+1,:) = names(i,2:3);      labels(i) = labels(i-1)+1;   end;end;disp('Computing laterality index');	weightings = sign(metric);	nonzero = find(weightings);   for i=1:nr_names,      latindex(i,:) = (weightings'*abs(data(1:m(i),1:n(i),i)))./(ones(1,m(i))*abs(data(1:m(i),1:n(i),i)));	end;   plot_a_lot(latindex, n, labels, latencies, '', titles, '', 'Laterality Index', 'normminmax');   if ~isempty(nameout),      nametmp = sprintf('%s.lat', nameout);      write_matrix(latindex, nametmp);   end;