function write_arrows_asa(locations, dim, orientations, moments, filename, latencies);if nargin==0,   disp('write_arrows_asa(locations, dim, orientations, moments, filename, latencies);');   return;end;[m nr_timepoints] = size(moments)[m nr_positions] = size(locations)if isempty(latencies),   latencies = 1:nr_timepoints;end;for i=1:nr_timepoints,   arrowmatrix1(1,:) = orientations(1,:).*moments(:,i)';   arrowmatrix1(2,:) = orientations(2,:).*moments(:,i)';   arrowmatrix1(3,:) = orientations(3,:).*moments(:,i)';   arrowmatrix2 = arrowmatrix1(:,1:dim:dim*nr_positions) + arrowmatrix1(:,2:dim:dim*nr_positions);   magnitudes(i,:) = norm_col(arrowmatrix2)';   rotmom(3*(i-1)+1:3*(i-1)+3,:) = normalize_cols(arrowmatrix2);end;fid = fopen(filename, 'w');fprintf(fid, '# Set of rotating dipoles\r');fprintf(fid, 'UnitPosition		mm\r');fprintf(fid, 'UnitMoment		nAm\r');fprintf(fid, 'UnitTime		ms\r');fprintf(fid, 'NumberPositions=	%d\r', nr_positions);fprintf(fid, 'NumberTimeSteps=	%d\r', nr_timepoints);fprintf(fid, 'TimeSteps		%f(%f)%f\r', latencies(1), latencies(2)-latencies(1), latencies(nr_timepoints));fprintf(fid, 'FirstTimeStep		%d\r', latencies(1));fprintf(fid, 'LastTimeSteps		%d\r', latencies(nr_timepoints));fprintf(fid, 'MomentsRotating\r');for i=1:nr_positions,   fprintf(fid, '%d,', i);   for j=1:nr_timepoints,      fprintf(fid, '%d: ', j);      for k=1:3,         fprintf(fid, '%f ', rotmom(3*(j-1)+k,i));      end;      fprintf(fid, '\r');   end;end;fprintf(fid, 'PositionsFixed\r');for i=1:nr_positions,   fprintf(fid, '%d: ', i);   for k=1:3,      fprintf(fid, '%f ', locations(k,i));   end;   fprintf(fid, '\r');end;fprintf(fid, 'Magnitudes\r');for i=1:nr_positions,   fprintf(fid, '%d: ', i);   for j=1:nr_timepoints-1,      fprintf(fid, '%f ', magnitudes(j,i));   end;   if (i~=nr_positions),      fprintf(fid, '%f\r', magnitudes(j+1,i));   else      fprintf(fid, '%f', magnitudes(j+1,i));   end;end;fclose(fid);