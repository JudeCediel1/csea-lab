% Compute and output dipole localization errors for given inverse G and forward solutions forward% for spherical concentric source space% Output in BESA-*.avr-format for all dimf orientations of forward solutions separately and for % every separate shell (specified by the locations of the forward solutions floc)% floc, gloc: locations corresponding to forward solutions and rows of inverse G, resp.% dimf, dimg: number of neighbouring elements of forward/G belonging to one location in the source space% metric_flag: 'cart', 'angle', 'ampl'% filestem: filename for output without extension, first appended number specifies shell, second% appended number specifies orientation (1..dimf)% OH 05.02.98% uses when_changes_radius(), dle(), write_avr()function [result, max_values] = dle_output(forward, floc, dimf, G, gloc, dimg, metric_flag, filestem);if nargin==0,   disp(' [result, max_values] = dle_output(forward, floc, dimf, G, gloc, dimg, metric_flag, filestem); ');   return;end;disp(' Computing DLEs ');if dimf>1, floc_tmp = shift_matrix(floc, dimf); end;[result, max_values] = dle(forward, floc_tmp, G, gloc, dimg, metric_flag);[q, r] = when_changes_radius(floc_tmp, 0.001);clear floc_tmp;disp(' Writing DLEs ');offset = 0;for i=1:length(q),   for j=1:dimf,      outname = sprintf('%s_s%d_o%d.avr', filestem, i, j);      disp(outname);      write_avr(result(offset+j:dimf:q(i)), outname, 1, 1);      outname = sprintf('%s%_s%d_o%d_a.avr', filestem, i, j);      disp(outname);      write_avr(max_values(offset+j:dimf:q(i)), outname, 1, 1);   end;   offset = q(i);end;