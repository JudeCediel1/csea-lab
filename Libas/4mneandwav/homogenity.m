function [data, values, ev, paths, names] = homogenity(paths, names, format, elplist, from, to, norm_flag, nameout);if nargin==0,   disp(' [data, values, ev, paths, names] = homogenity(paths, names, format, elplist, from, to, norm_flag, nameout); ');   return;end;if isempty(names),   if strcmp(format, 'avr'), ending = '*.avr'; end;	if strcmp(format, 'mfxtxt'), ending = '*.asc'; end;   [namelist, names, paths] = read_filelist(ending);   nr_names = length(namelist(:,1));else   nr_names = length(names(:,1));   for i=1:nr_names,      namelist(i,1:length(deblank(names(i,:)))+length(deblank(paths(i,:)))) = sprintf('%s%s', deblank(paths(i,:)), deblank(names(i,:)));   end;end;namelist[data, m, n, latencies] = read_data(namelist, elplist, format);if isempty(from), from=1; end;if isempty(to), to=n(1); end;cnt = 1;for i=from:to,		% timepoints   for j=1:nr_names,      matrix(:,j) = data(:,i,j);   end;   if strcmp(norm_flag, 'norm'), matrix = normalize(matrix); end;   ev(:,cnt) = svd(matrix);   values(cnt) = ev(1,cnt)^2/sum(ev(:,cnt).^2);   cnt = cnt+1;   clear matrix;end;if ~isempty(nameout),   write_matrix(values', nameout);end;figure;clf;plot(latencies(1,from:to), values);axis([latencies(1,from)  latencies(1,to)  min(min(values))  max(max(values))]);xlabel('Latency');ylabel('Variance of 1st component');title('Homogenity');