function [diff, data] = symmetry(norm_flag, pathname, namelist, pairs, filename);if nargin==0,   disp(' [diff, data] = symmetry(norm_flag, pathname, namelist, pairs, filename); ');   return;end;nr_names = length(namelist(:,1));disp('Reading in data, average referencing');for i=1:nr_names,				% Reading in additional files	name = sprintf('%s\\%s', pathname, namelist(i,:));	disp(name);   [matrix, latencies] = read_avr(name);   TSB(i) = latencies(1);   if length(latencies)>1, DI(i)=latencies(2)-latencies(1); else DI(i)=1; end;   [m(i) n(i)] = size(matrix);    data(:,1:n(i), i) =  matrix;	data(:,1:n(i), i) = avg_ref(data(:,1:n(i), i));	n(i)end;disp('Computing symmetry measure for potentials');for i=1:nr_names,	diff(1:n(i),i) = differences(data(:,1:n(i),i), pairs, norm_flag, '');end;disp('Computing means and standard deviations');for i=1:nr_names,   means(i) = mean(diff(1:n(i),i));   stds(i) = std(diff(1:n(i),i));end;colours = char('r', 'b', 'g', 'm', 'c', 'y', 'w', 'k');if nr_names>length(colours),	disp('Not enough colours for all files! (symmetry)');end;disp('Plotting');clf;	for i=1:nr_names,		if i<length(colours),         c = sprintf('%s:', colours(i));		else         c = 'k:';		end;		plot(diff(1:n(i),i), c); hold on;	end;   legend(namelist(:,1:3), 1);  hold on;   for i=1:nr_names,		if i<length(colours),         c = sprintf('%so', colours(i));		else         c = 'ko';		end;		errorbar(i, means(i), stds(i), c); hold on;	end;   xlabel('Subjects'); ylabel('Symmetry measure');         if ~isempty(filename),      write_matrix(diff, filename);   end;   