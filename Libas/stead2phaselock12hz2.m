%==================================================================%%	stead2phaselock%% sliding window procedure%%!!!!!!!!!!! enter pairs as twocolumn-matrix%	%	Function definition function [fftamp, fftcomplexphasevec, phasestabmat] = stead2phaselock12hz2(filemat, plotflag, bslvec, ssvepvec);    if nargin < 2, plotflag = [], end   % this to be done outside the loop to save time, needed for winshift proc  tempvec = [20 20 20 21 22 22]; % this makes sure that average win duration is exactly @@, which is the duration in sp of one cyle at @@ Hz = @@ ms, sampled at 250 Hz longvec = repmat(tempvec,1,40); % repeat this many times, at least for duration of entire epoch, subsegments are created later  winshiftvec_long = cumsum(longvec)+ ssvepvec(1); % use cumsum function to create growing vector of indices for start of the winshift tempindexvec = find(winshiftvec_long > ssvepvec(length(ssvepvec)));  endindex = tempindexvec(1);  % this is the first index for which the winshiftvector exceeds the data segment  winshiftvec = winshiftvec_long(1:endindex-5)  for fileindex = 1 : size(filemat,1);    	FilePath = filemat(fileindex,:);   		[Data,Version,LHeader,ScaleBins,NChan,NPoints,NTrials,SampRate,AvgRefStatus,File,Path,FilePath,EegMegStatus,NChanExtra,AppFileFormatVal]=...	ReadAppData(FilePath,1);	    ampmat = [];       fftamp = [];     fftcomplexphasevec = []; 	for trial = 1:NTrials        [Data,Version,LHeader,ScaleBins,NChan,NPoints,NTrials,SampRate,AvgRefStatus,File,Path,FilePath,EegMegStatus,NChanExtra,AppFileFormatVal]=...	ReadAppData(FilePath,trial);		%============================================================	% 2. Baseline correction	%===========================================================		disp ('subtracting baseline')	    datamat = bslcorr(Data, bslvec);	%===========================================================	% 3. moving window procedure with 4 cycles @ 12 Hz !!!	% 	%===========================================================	disp('moving window procedure')		winmatsum = zeros(size(datamat,1),84); %4 cycles		if plotflag, h = figure, end       for winshiftstep = 1:length(winshiftvec)		        winmatsum = (winmatsum + regressionMAT(datamat(:,[winshiftvec(winshiftstep):winshiftvec(winshiftstep)+83]))); % time domain averaging for win file                %calculate complex fft on segment        trialmat = regressionMAT(datamat(:,[winshiftvec(winshiftstep):winshiftvec(winshiftstep)+83]));          % amplitude for each segment       NFFT = 83;        NumUniquePts = ceil((NFFT+1)/2); 	   fftmat = fft(trialmat(:,1:83)'); % transpose: channels as columns (fft columnwise)       Mag = abs(fftmat);                                                   % Amplitude calc       Mag = Mag*2;   	        Mag(1) = Mag(1)/2;                                                    % DC was unique        if ~rem(NFFT,2),                                                    % Nyquist Frequency unique            Mag(length(Mag))=Mag(length(Mag))/2;        end        Mag=Mag/NFFT; % scale fft so it is independent of NFFT        fftamp = [fftamp; Mag(5,:)];                  % phase for each segment @ 12 Hz    fftcomplexphasevec = [fftcomplexphasevec; fftmat(5,:)];                           if plotflag           subplot(2,1,2), plot(1:4:84*4, regressionMAT(datamat(:,[winshiftvec(winshiftstep):winshiftvec(winshiftstep)+83]))'), title(['sliding window starting at ' num2str((winshiftvec(winshiftstep))*4)  ' ms ']), xlabel('time in milliseconds')           subplot(2,1,1), plot(1:4:84*4, winmatsum'), title(['sum of sliding windows; number of shifts:' num2str(winshiftstep) ]), ylabel('microvolts')            %  subplot(3,1,3), hold on, circle([0,0],1,200,'-');            %  plot([0;(imag(fouriercomp(120)./tenHZampfft(120)))], [0;(real(fouriercomp(120)./tenHZampfft(120)))]);title('phase angle of window')            pause(.4)       end          %    movmat(index) = getframe(h)     end        winmat = winmatsum./length(winshiftvec);       	%===========================================================	% 5. determine amplitude and Phase using fft	%===========================================================	disp ('determining 12 Hz Phase per channel')			% for fft with amplitude scaling:		NFFT = 83; 	NumUniquePts = ceil((NFFT+1)/2); 	fftMat = fft (winmat', 83);  % transpose: channels as columns (fft columnwise)	Mag = abs(fftMat);                                                   % Amplitude berechnen	Mag = Mag*2;   		Mag(1) = Mag(1)/2;                                                    % DC trat aber nicht doppelt auf	if ~rem(NFFT,2),                                                    % Nyquist Frequenz (falls vorhanden) auch nicht doppelt        Mag(length(Mag))=Mag(length(Mag))/2;	end		Mag=Mag/NFFT;                                                         % FFT so skalieren, da? sie keine Funktion von NFFT ist		%fftamp = [fftamp Mag(5,:);];       %  ampmat = [ampmat fftamp'];         end % trials	% 	% 	%===========================================================% 	% 6. bestimmung der mittleren Amplitude mit diffferenz(max-min)% 	%===========================================================% 	% amplitudefftamp = fftamp'; SaveAvgFile([FilePath '.tvamp' ],fftamp,[],[],SampRate,[],[],EegMegStatus)% phase stabilityfftcomplexphasevec = fftcomplexphasevec'; fftcomplexphasevec_norm = fftcomplexphasevec./abs(fftcomplexphasevec); phasestabmat = abs(mean(fftcomplexphasevec_norm, 2)); % intersite phaselocking with 75tempdiff = fftcomplexphasevec_norm - repmat(fftcomplexphasevec_norm(75,:), 129,1);size(tempdiff)tempdiff(75,:) = ones(1,length(tempdiff));tempdiff = tempdiff ./(abs(tempdiff)) ;phaselock75 = abs(mean(tempdiff, 2));% 	Phasevec = Phasevec';% 	tenHZampfft = tenHZampfft';% 		SaveAvgFile([FilePath '.phalock75' ],phaselock75,[],[],SampRate,[],[],EegMegStatus)%          %	SaveAvgFile([FilePath '.win' ],winmat,NTrialAvgVec,[],SampRate,MedMedRawVec,MedMedAvgVec,EegMegStatus)%         %	SaveAvgFile([FilePath '.phastab' ],phasestabmat,NTrialAvgVec,[],SampRate,MedMedRawVec,MedMedAvgVec,EegMegStatus)end