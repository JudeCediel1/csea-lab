"""
Process subjects from a BIDS-valid dataset via Singularity containers in the cluster.

Note that you MUST run this script with Python 3, not Python 2. Thus, to activate this script in
HiPerGator, type "python3 submitjob_fmriprep.py" into the command line.

Created 9/16/2020 by Ben Velie.
veliebm@gmail.com

"""

import argparse
import pathlib
import subprocess
import re


SLURM_SCRIPT_NAME = "submitjob_tmp.sh"


def write_script(time_requested, email_address, number_of_processors, ram_requested, qos):
    """
    Writes the SLURM script to the current working directory.


    Parameters
    ----------
    time_requested : str
        Amount of time to request for job. Format as d-hh:mm:ss.
    email_address : str
        Email address to send job updates to.
    number_of_processors : str
        Amount of processors to use in the job.
    ram_requested : str
        Amount of RAM to request in MB.

    """

    script_contents = f"""#! /bin/bash

# Script to submit a subject from a BIDS dataset to HiPerGator to process with fMRIPrep in a Singularity container.
# Automatically generated by start_submit_job.py

#SBATCH --job-name=fmriprep				# Job name
#SBATCH --ntasks=1					# Run a single task		
#SBATCH --cpus-per-task={number_of_processors}				# Number of CPU cores per task
#SBATCH --mem={ram_requested}mb						# Job memory request
#SBATCH --time={time_requested}				# Walltime in hh:mm:ss or d-hh:mm:ss
#SBATCH --qos={qos}
# Outputs ----------------------------------
#SBATCH --mail-type=ALL					# Mail events (NONE, BEGIN, END, FAIL, ALL)
#SBATCH --mail-user={email_address}		      # Where to send mail	
#SBATCH --output=%x-%A-%a.log			      # Standard output log
#SBATCH --error=%x-%A-%a.err			      # Standard error log
pwd; hostname; date					# Useful things we'll want to see in the log
# ------------------------------------------

# Set bids_dir equal to first command-line parameter and subject equal to the second
BIDS_DIR="$1"
subject="$2"

export HOME="/blue/akeil/veliebm"
DERIVS_DIR="$BIDS_DIR/derivatives"
LOCAL_FREESURFER_DIR="$DERIVS_DIR/freesurfer"

# Make sure FS_LICENSE is defined in the container.
export SINGULARITYENV_FS_LICENSE="$HOME/files/.licenses/freesurfer.txt"

# Prepare derivatives folder.
mkdir -p "$BIDS_DIR/$DERIVS_DIR"
mkdir -p "$LOCAL_FREESURFER_DIR"

# Compose command to start singularity.
SINGULARITY_CMD="singularity run --home $HOME --cleanenv $HOME/files/images/fmriprep-20.1.2.simg"

# Remove IsRunning files from FreeSurfer.
find "$LOCAL_FREESURFER_DIR/sub-$subject"/ -name "*IsRunning*" -type f -delete

# Compose the command line.
cmd="$SINGULARITY_CMD $BIDS_DIR $DERIVS_DIR participant --participant-label $subject -vv --resource-monitor --write-graph --nprocs {number_of_processors} --mem_mb {ram_requested}"

# Setup done, run the command.
echo Running task "$SLURM_ARRAY_TASK_ID"
echo Commandline: "$cmd"
eval "$cmd"
exitcode=$?

echo Finished processing subject "$subject" with exit code $exitcode
exit $exitcode
    """

    with open(SLURM_SCRIPT_NAME, "w") as script:
        script.write(script_contents)


def _get_subject_id(path) -> str:
    """
    Returns the subject ID found in the input file name.

    Returns "None" if no subject ID found.

    """
    
    potential_subject_ids = re.findall(r"sub-(\d+)", str(path))
    try:
        subject_id = potential_subject_ids[-1]
    except IndexError:
        subject_id = None
    return subject_id


if __name__ == "__main__":
    """
    Enables use of the script from the command line.

    The user must specify the location of the BIDS directory.
    They can also specify EITHER a specific subject OR all subjects. Cool stuff!

    """


    parser = argparse.ArgumentParser(
        description="Run containerized fMRIPrep in HiPerGator on subjects from your BIDS-valid dataset!",
        epilog="The user may specify EITHER a specific subject OR all subjects. All outputs will be placed in bids_dir/derivatives/"
    )


    parser.add_argument(
        "bids_dir",
        help="Root of the BIDS directory."
    )

    parser.add_argument(
        "--time",
        "-t",
        type=str,
        default="2-00:00:00",
        metavar="d-hh:mm:ss",
        help="Defaults to 2-00:00:00. Amount of time requested for the job."
    )

    parser.add_argument(
        "--email",
        "-e",
        type=str,
        default="veliebm@ufl.edu",
        metavar="EMAIL_ADDRESS",
        help="Defaults to veliebm@ufl.edu. Email address to send job updates to."
    )

    parser.add_argument(
        "--n_procs",
        '-n',
        default="2",
        metavar="PROCESSORS",
        help="Defaults to 2. Number of processors to use per subject."
    )

    parser.add_argument(
        "--mem",
        "-m",
        default="8000",
        metavar="MEMORY_IN_MB",
        help="Defaults to 8000 MB. Amount of memory to allocate for each subject."
    )

    parser.add_argument(
        "--qos",
        "-q",
        default="akeil",
        choices=["akeil", "akeil-b"],
        help="Defaults to regular QOS. Use akeil-b for burst QOS."
    )
    
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument(
        "--subject",
        "-s",
        metavar="SUBJECT_ID",
        help="Analyze a specific subject ID. Mutually exclusive with --all."
    )
    group.add_argument(
        '--all',
        '-a',
        action='store_true',
        help="Analyze all subjects. Mutually exclusive with --subjects."
    )


    args = parser.parse_args()
    print(args)

    write_script(
        time_requested=args.time,
        email_address=args.email,
        number_of_processors=args.n_procs,
        ram_requested=args.mem,
        qos=args.qos
    )

    # Option 1: Process all subjects.
    if args.all:
        for subject_dir in args.bids_dir.glob("sub-*"):
            subject_id = _get_subject_id(subject_dir)
            print(f"Submitting subject {subject_id}")
            subprocess.Popen(["sbatch", SLURM_SCRIPT_NAME, args.bids_dir, subject_id])

    # Option 2: Process a single subject.
    else:
        print(f"Submitting subject {args.subject}")
        subprocess.Popen(["sbatch", SLURM_SCRIPT_NAME, args.bids_dir, args.subject])
