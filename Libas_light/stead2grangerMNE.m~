%==================================================================%%	stead2grangerMNE%%calculates granger causality in source space, for groups of MNE dipoles%	%	Function definition function [bic] = stead2grangerMNE(filemat, plotflag, G, indices_elecMNE);       if nargin < 2, plotflag = [], end    exp = 'emosteady'    for fileindex = 1 : size(filemat,1);    	FilePath = filemat(fileindex,:);   			[rawmat,File,Path,FilePath,NTrialAvgVec,StdChanTimeMat,...		SampRate,AvgRef,Version,MedMedRawVec,MedMedAvgVec,EegMegStatus,NChanExtra]= ReadAvgFile(FilePath);	%===========================================================	%filtern	%===========================================================	disp('filtering data 1 Hz high pass/subtract baseline')		[B,A] = butter(4,0.01,'high');		filtmat = filtfilt(B,A,rawmat');	    filtmat = filtmat';   	%============================================================	% 2. Baselinekorrektur	%===========================================================		if exp == 'emosteady', latms = 1000; end		latsp = latms/4;		bslvec = mean(filtmat(:,[latsp/2:latsp])');		for chan = 1 : size(filtmat,1);				datamat(chan, :) = filtmat(chan,:) - bslvec(chan);		end				%===========================================================	% 3. moving window procedure mit jeweils 5 zyklen (=500ms/125sp),	% beginnend bei stimulusonset fuer alle kanaele. 	% shiften um 100ms (25sp) = 1 Zyklus	%===========================================================	disp('transform to source space and plot if wanted...')		inv_sol =  inv_recon(G, datamat, 3);       inv_sol_elecsites = inv_sol(indices_elecMNE,:);          size(inv_sol_elecsites)                % _________________    % build matrix for granger analysis: time and dipole subgroups    %        disp('group time points and source locations to form ROIS for granger analysis')        grangermat1 = inv_sol_elecsites(:,600:2:1600); % time window well within ssvep, undersampled by two        % group dipole groups from left to right and ant to post          roimat1 = mean(grangermat1([25 28 34 35 25],:)); %left ant    roimat2 = mean(grangermat1([41 42 37 31 36 30],:)); %left central    roimat3 = mean(grangermat1([50:52 58:60],:)); %left PO    roimat4 = mean(grangermat1([64:65 69:70],:)); % Left occ    roimat5 = mean(grangermat1([10 11 16 19],:)); %cent ant    roimat6 = mean(grangermat1([129 32 55 81],:)); %cent cent    roimat7 = mean(grangermat1([67 68 73 78],:)); %cent parocc    roimat8 = mean(grangermat1([76 75 83 82],:)); %central occ    roimat9 = mean(grangermat1([122:124 117:119],:)); %right ant    roimat10 = mean(grangermat1([110:112 104:106],:)); % right cent    roimat11 = mean(grangermat1([93 98 102 86 92 97],:)); %right parocc    roimat12 = mean(grangermat1([91 96 84 90 95],:)); % right occ     if plotflag, figure(1), plot(roimat8), end        grangermat2 = [roimat11;roimat10;roimat9;roimat5;roimat1;roimat2;roimat3;roimat4;roimat6;roimat8;roimat7;roimat12];        % calculate granger stats    disp('granger analysis')    uroot = aks_check_covariance_stationarity(grangermat2,2); figure(10), hold on, plot(uroot), hold off    [bic(fileindex),aic] = aks_find_model_order(grangermat2,2,10);    [ret] = aks_granger_regress(grangermat2,2);    [GC,FS] = aks_findsignificance(ret.gc,ret.fs,.01, 1);        eval(['save ' FilePath '.RET.mat -struct ret'])      end