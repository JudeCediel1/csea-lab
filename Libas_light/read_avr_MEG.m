function [data, latencies, sample_int] = read_avr_MEG(filename);if nargin==0,		% No name specified	[name, pathname] = uigetfile('*', 'Choose a BESA-*.avr-file!');	filename = sprintf('%s%s', pathname, name);end;fid = fopen(filename, 'r');line = fgetl(fid);[dummy, remainder] = strtok(line);if strcmp(dummy, 'Npts=')==0, disp('1This is not an *.avr-header!!!'); fclose(fid); return; end;[dummy, remainder] = strtok(remainder);			% Number of timepoints (number of columns)nr_timepoints = str2num(dummy);[dummy, remainder] = strtok(remainder);if strcmp(dummy, 'TSB=')==0, disp('2This is not an *.avr-header!!!'); fclose(fid); return; end;[dummy, remainder] = strtok(remainder);					% Begin of latency rangeoffset = str2num(dummy);[dummy, remainder] = strtok(remainder);if strcmp(dummy, 'DI=')==0, disp('3This is not an *.avr-header!!!'); fclose(fid); return; end;[dummy, remainder] = strtok(remainder);				% Intervall between sample points (ms)sample_int = str2num(dummy);[dummy, remainder] = strtok(remainder);if strcmp(dummy, 'SB=')==0, disp('4This is not an *.avr-header!!!'); fclose(fid); return; end;[dummy, remainder] = strtok(remainder);					% Number of bins per microvoltnr_bins = str2num(dummy);[dummy, remainder] = strtok(remainder);if strcmp(dummy, 'SC=')==0, disp('5This is not an *.avr-header!!!'); fclose(fid); return; end;[dummy, remainder] = strtok(remainder);					% Calibration factorcalib = str2num(dummy);latencies = offset:sample_int:(nr_timepoints-1)*sample_int+offset;sensornames = fgetl(fid);;data = fscanf(fid, '%f', [nr_timepoints, inf]);data = data';fclose(fid);