function [T1_dummy, SOA_dummy, T2_dummy, korrektT1vec, T2_response_vec, response_dummy, T1_stat, T2_hitrate, T2_RT] = get_pres_log_long(infilepath)% tastencode 1 = ALTGR = wort% tastencode 2 = ALTGR = pseudowortfid = fopen(infilepath)% dummylinesdumline = fgetl(fid);dumline = fgetl(fid);dumline = fgetl(fid);dumline = fgetl(fid);dumline = fgetl(fid);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  fuer altgr == wortline = 1;index = 1;			while line > 0				% read data				line = fgets(fid);				if isempty(str2num(line(1))), disp(['events found: ']), disp(eventnum), disp(['lines found: ']), disp(index-1), break, end		if line < 0, break, return, end				% segmentiere jede zeile nach tabs				trialnumseg = find(line == '	');				% event-tags				eventnum = str2num(line(1:trialnumseg(1)-1));				eventkind = line(trialnumseg(1)+1:trialnumseg(2)-1);				eventcateg = line(trialnumseg(2)+1:trialnumseg(3)-1);				eventtime(index) = str2num(line(trialnumseg(3)+1:trialnumseg(4)-1));				% denksport		%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%			% 1. suche nach allen trialendenden:  2 mal RESPONSE in a row, 				if strcmp(eventkind, 'Response'), trialend_vec(index) = 1;		else trialend_vec(index) = 0;		end				if index == 1, trialend_vec(index) = 0; end							if index>1					if trialend_vec(index) == 1 & trialend_vec(index-1) == 1,						trialend_vec(index) = 2;					end						 		if trialend_vec(index-1) == 2 & trialend_vec(index) == 1,						trialend_vec(index-1) = 1; trialend_vec(index) = 2;					end												end							% abfragen fuer T1		if strcmp('T1_1', eventcateg), T1_dummy(index) = 1;		elseif strcmp('T1_2', eventcateg), T1_dummy(index) = 2;		elseif strcmp('T1_3', eventcateg), T1_dummy(index) = 3;		else T1_dummy(index) = 0;		end				% abfragen fuer SOA		if strcmp('SOA1', eventcateg), SOA_dummy(index) = 1;		elseif strcmp('SOA2', eventcateg), SOA_dummy(index) = 2;		elseif strcmp('SOA3', eventcateg), SOA_dummy(index) = 3;		else SOA_dummy(index) = 0;		end			% abfragen fuer T2s		if strcmp('T2_pleasant', eventcateg), T2_dummy(index) = 1;		elseif strcmp('T2_neutral', eventcateg), T2_dummy(index) = 2;		elseif strcmp('T2_unpleasant', eventcateg), T2_dummy(index) = 3;		elseif strcmp('T2_DD', eventcateg), T2_dummy(index) = 4;		else T2_dummy(index) = 0;		end					% abfragen fuer mausklicks und buttons		if strcmp('0', eventcateg), response_dummy(index) = 0;		elseif strcmp('1', eventcateg), response_dummy(index) = 1;	    elseif strcmp('2', eventcateg), response_dummy(index) = 2;		elseif strcmp('3', eventcateg), response_dummy(index) = 3;		elseif strcmp('4', eventcateg), response_dummy(index) = 4;		else  response_dummy(index) = -1;		end			index = index + 1;			% for correctflag	end	eventtime = eventtime  ./ 10; % in millisekunden (statt mikrosec)	% 'offline denksport'	trialend_indices_vec = find(trialend_vec == 2);		disp('anzahl trialenden: ')	disp(length(trialend_indices_vec))		% gehe durch die trials und berechne das interessierende				for trialnum = 1 : length(trialend_indices_vec);								if trialnum == 1									  for eventindex = 1:trialend_indices_vec(1);					   					  % finde T1 art					  if T1_dummy(eventindex)>0, T1_trial_vec(trialnum) = T1_dummy(eventindex); end					  					  % finde SOA art					  if SOA_dummy(eventindex)>0, SOA_trial_vec(trialnum) = SOA_dummy(eventindex); end					  					  % finde T2 valenz					   if T2_dummy(eventindex)>0, T2_trial_vec(trialnum) = T2_dummy(eventindex);					   					  			% finde response auf T2								for subindex =  eventindex:trialend_indices_vec(trialnum)-2;									if response_dummy(subindex)==0, T2_response_vec(trialnum) = eventtime(subindex) - eventtime(eventindex); 									else T2_response_vec(trialnum) = 0;									end								end					  					   end					  									   end					   if  response_dummy(trialend_indices_vec(1)) == T1_trial_vec(trialnum) | response_dummy(trialend_indices_vec(1)-1) == T1_trial_vec(trialnum);					   korrektT1vec(trialnum) = T1_trial_vec(trialnum);				   else					   korrektT1vec(trialnum) = 0;				   end		   			   				   else								for eventindex = trialend_indices_vec(trialnum-1):trialend_indices_vec(trialnum);												 % finde T1 art						 if T1_dummy(eventindex)>0, 	T1_trial_vec(trialnum) = T1_dummy(eventindex); end						 						 % finde SOA art					     if SOA_dummy(eventindex)>0, SOA_trial_vec(trialnum) = SOA_dummy(eventindex); end						 						 % finde T2 valenz					     if T2_dummy(eventindex)>0, T2_trial_vec(trialnum) = T2_dummy(eventindex); 						 								 % finde response auf T2								for subindex =  eventindex:trialend_indices_vec(trialnum)-2;																	if response_dummy(subindex)==0, T2_response_vec(trialnum) = eventtime(subindex) - eventtime(eventindex); break;									else T2_response_vec(trialnum) = 0;									end								end					  						 end								end					if  response_dummy(trialend_indices_vec(trialnum)) == T1_trial_vec(trialnum) | response_dummy(trialend_indices_vec(trialnum)-1) == T1_trial_vec(trialnum);					   korrektT1_trial_vec(trialnum) = T1_trial_vec(trialnum);				   else					   korrektT1_trial_vec(trialnum) = 0;				   end								end				end		  						% statmat = [condition_vec' correctvec' RTvec'];%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% aus den trialvektoren statistikinfo berechnen:% indizesSOA1_indices = find(SOA_trial_vec == 1);SOA2_indices = find(SOA_trial_vec == 2);SOA3_indices = find(SOA_trial_vec == 3);T2_pleas_indices = find(T2_trial_vec == 1);T2_neutr_indices = find(T2_trial_vec == 2);T2_unplea_indices = find(T2_trial_vec == 3);T2_DD_indices = find(T2_trial_vec == 4);ple_lag1_indices = find(T2_trial_vec == 1 & SOA_trial_vec ==1);ntr_lag1_indices = find(T2_trial_vec == 2 & SOA_trial_vec ==1);upl_lag1_indices = find(T2_trial_vec == 3 & SOA_trial_vec ==1);DD_lag1_indices = find(T2_trial_vec == 4 & SOA_trial_vec ==1);ple_lag2_indices = find(T2_trial_vec == 1 & SOA_trial_vec ==2);ntr_lag2_indices = find(T2_trial_vec == 2 & SOA_trial_vec ==2);upl_lag2_indices = find(T2_trial_vec == 3 & SOA_trial_vec ==2);DD_lag2_indices = find(T2_trial_vec == 4 & SOA_trial_vec ==2);ple_lag3_indices = find(T2_trial_vec == 1 & SOA_trial_vec ==3);ntr_lag3_indices = find(T2_trial_vec == 2 & SOA_trial_vec ==3);upl_lag3_indices = find(T2_trial_vec == 3 & SOA_trial_vec ==3);DD_lag3_indices = find(T2_trial_vec == 4 & SOA_trial_vec ==3);%%%%%%%%%%%%%%%%%%%% todo: T2 masse fuer korrekte T1 !!!!!!!!!!!!!!!!!!!!!!!!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% T1 prozent KorrektT1correct_ple_lag1 = (length(find(korrektT1_trial_vec(ple_lag1_indices)>0)) / length(korrektT1_trial_vec(ple_lag1_indices))) .*100;T1correct_ntr_lag1 = (length(find(korrektT1_trial_vec(ntr_lag1_indices)>0)) / length(korrektT1_trial_vec(ntr_lag1_indices))) .*100;T1correct_upl_lag1 = (length(find(korrektT1_trial_vec(upl_lag1_indices)>0)) / length(korrektT1_trial_vec(upl_lag1_indices))) .*100;T1correct_DD_lag1 = (length(find(korrektT1_trial_vec(DD_lag1_indices)>0)) / length(korrektT1_trial_vec(DD_lag1_indices))) .*100;T1correct_ple_lag2 = (length(find(korrektT1_trial_vec(ple_lag2_indices)>0)) / length(korrektT1_trial_vec(ple_lag2_indices))) .*100;T1correct_ntr_lag2 = (length(find(korrektT1_trial_vec(ntr_lag2_indices)>0)) / length(korrektT1_trial_vec(ntr_lag2_indices))) .*100;T1correct_upl_lag2 = (length(find(korrektT1_trial_vec(upl_lag2_indices)>0)) / length(korrektT1_trial_vec(upl_lag2_indices))) .*100;T1correct_DD_lag2 = (length(find(korrektT1_trial_vec(DD_lag2_indices)>0)) / length(korrektT1_trial_vec(DD_lag2_indices))) .*100;T1correct_ple_lag3 = (length(find(korrektT1_trial_vec(ple_lag3_indices)>0)) / length(korrektT1_trial_vec(ple_lag3_indices))) .*100;T1correct_ntr_lag3 = (length(find(korrektT1_trial_vec(ntr_lag3_indices)>0)) / length(korrektT1_trial_vec(ntr_lag3_indices))) .*100;T1correct_upl_lag3 = (length(find(korrektT1_trial_vec(upl_lag3_indices)>0)) / length(korrektT1_trial_vec(upl_lag3_indices))) .*100;T1correct_DD_lag3 = (length(find(korrektT1_trial_vec(DD_lag3_indices)>0)) / length(korrektT1_trial_vec(DD_lag3_indices))) .*100;T1_stat = [T1correct_ple_lag1 T1correct_ntr_lag1 T1correct_upl_lag1 T1correct_DD_lag1 T1correct_ple_lag2 T1correct_ntr_lag2 T1correct_upl_lag2 T1correct_DD_lag2 T1correct_ple_lag3 T1correct_ntr_lag3 T1correct_upl_lag3 T1correct_DD_lag3]% T2 reaction times for Rts > 150 < 850 und korrekte T1T2_RT_ple_lag1_indices = find(T2_response_vec > 150 & T2_response_vec < 850 & SOA_trial_vec == 1 & T2_trial_vec == 1 & korrektT1_trial_vec > 0);T2_RT_ntr_lag1_indices = find(T2_response_vec >150 & T2_response_vec < 850& SOA_trial_vec == 1 & T2_trial_vec == 2 & korrektT1_trial_vec > 0);T2_RT_upl_lag1_indices = find(T2_response_vec >150 & T2_response_vec < 850& SOA_trial_vec == 1 & T2_trial_vec == 3 & korrektT1_trial_vec>0);T2_RT_ple_lag2_indices = find(T2_response_vec > 150 & T2_response_vec < 850 & SOA_trial_vec == 2 & T2_trial_vec == 1 & korrektT1_trial_vec > 0);T2_RT_ntr_lag2_indices = find(T2_response_vec >150 & T2_response_vec < 850& SOA_trial_vec == 2 & T2_trial_vec == 2 & korrektT1_trial_vec > 0);T2_RT_upl_lag2_indices = find(T2_response_vec >150 & T2_response_vec < 850& SOA_trial_vec == 2 & T2_trial_vec == 3 & korrektT1_trial_vec > 0);T2_RT_ple_lag3_indices = find(T2_response_vec > 150 & T2_response_vec < 850 & SOA_trial_vec == 3 & T2_trial_vec == 1 & korrektT1_trial_vec > 0);T2_RT_ntr_lag3_indices = find(T2_response_vec >150 & T2_response_vec < 850& SOA_trial_vec == 3 & T2_trial_vec == 2 & korrektT1_trial_vec > 0);T2_RT_upl_lag3_indices = find(T2_response_vec >150 & T2_response_vec < 850& SOA_trial_vec == 3 & T2_trial_vec == 3 & korrektT1_trial_vec > 0);T2_RT_ple_lag1 = median(T2_response_vec(T2_RT_ple_lag1_indices));T2_RT_ntr_lag1 = median(T2_response_vec(T2_RT_ntr_lag1_indices));T2_RT_upl_lag1 = median(T2_response_vec(T2_RT_upl_lag1_indices));T2_RT_ple_lag2 = median(T2_response_vec(T2_RT_ple_lag2_indices));T2_RT_ntr_lag2 = median(T2_response_vec(T2_RT_ntr_lag2_indices));T2_RT_upl_lag2 = median(T2_response_vec(T2_RT_upl_lag2_indices));T2_RT_ple_lag3 = median(T2_response_vec(T2_RT_ple_lag3_indices));T2_RT_ntr_lag3 = median(T2_response_vec(T2_RT_ntr_lag3_indices));T2_RT_upl_lag3 = median(T2_response_vec(T2_RT_upl_lag3_indices));T2_RT = [T2_RT_ple_lag1 T2_RT_ntr_lag1 T2_RT_upl_lag1    T2_RT_ple_lag2 T2_RT_ntr_lag2 T2_RT_upl_lag2    T2_RT_ple_lag3 T2_RT_ntr_lag3 T2_RT_upl_lag3]% T2 hits for Rts > 150 < 850 und korrekte T1  : hier obige length(index einfuegen)T2hitrate_ple_lag1 = (length(T2_RT_ple_lag1_indices) / length(T2_response_vec(ple_lag1_indices))) .*100;T2hitrate_ntr_lag1 = (length(T2_RT_ntr_lag1_indices) / length(T2_response_vec(ntr_lag1_indices))) .*100;T2hitrate_upl_lag1 = (length(T2_RT_upl_lag1_indices) / length(T2_response_vec(upl_lag1_indices))) .*100;T2hitrate_DD_lag1 =  (length(find(T2_response_vec(DD_lag1_indices)>0 & korrektT1_trial_vec(DD_lag1_indices) > 0)) / length(T2_response_vec(DD_lag1_indices))) .*100;T2hitrate_ple_lag2 = (length(T2_RT_ple_lag2_indices) / length(T2_response_vec(ple_lag2_indices))) .*100;T2hitrate_ntr_lag2 = (length(T2_RT_ntr_lag2_indices) / length(T2_response_vec(ntr_lag2_indices))) .*100;T2hitrate_upl_lag2 = (length(T2_RT_upl_lag2_indices) / length(T2_response_vec(upl_lag2_indices))) .*100;T2hitrate_DD_lag2 =  (length(find(T2_response_vec(DD_lag2_indices)>0 & korrektT1_trial_vec(DD_lag2_indices) > 0)) / length(T2_response_vec(DD_lag2_indices))) *100;T2hitrate_ple_lag3 = (length(T2_RT_ple_lag3_indices) / length(T2_response_vec(ple_lag3_indices))) .*100;T2hitrate_ntr_lag3 = (length(T2_RT_ntr_lag3_indices) / length(T2_response_vec(ntr_lag3_indices))) .*100;T2hitrate_upl_lag3 = (length(T2_RT_upl_lag3_indices) / length(T2_response_vec(upl_lag3_indices))) .*100;T2hitrate_DD_lag3 =  (length(find(T2_response_vec(DD_lag3_indices)>0 & korrektT1_trial_vec(DD_lag3_indices) > 0)) / length(T2_response_vec(DD_lag3_indices))) .*100;T2_hitrate = [T2hitrate_ple_lag1 T2hitrate_ntr_lag1 T2hitrate_upl_lag1 T2hitrate_DD_lag1 T2hitrate_ple_lag2 T2hitrate_ntr_lag2 T2hitrate_upl_lag2 T2hitrate_DD_lag2 T2hitrate_ple_lag3 T2hitrate_ntr_lag3 T2hitrate_upl_lag3 T2hitrate_DD_lag3]eval(['save ' infilepath '.T1_stat T1_stat -ascii'])eval(['save ' infilepath '.T2_RT T2_RT -ascii'])eval(['save ' infilepath '.T2_hits T2_hitrate -ascii'])fclose('all')