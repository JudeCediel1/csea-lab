function [data, m, n, latencies] = read_data(namelist, elplist, format, from, to);if nargin==0,   disp(' [data, m, n, latencies] = read_data(namelist, elplist, format, from, to); ');   return;end;nr_names = length(namelist(:,1));disp(namelist(1,:));if strcmp(format, 'avr') | strcmp(format, 'avrnoref'), [matrix, latency] = read_avr(deblank(namelist(1,:))); end;if strcmp(format, 'mfxtxt'), [matrix] = read_mfxtxt(deblank(namelist(1,:)), 'l'); end;[m(1) n(1)] = size(matrix);if (nargin>3),			% If from or to specified...   if isempty(from), from_elem=1; else, [tmp, from_elem] = min(abs(latency-from)); end;   if isempty(to), to_elem=n(1); else, [tmp, to_elem] = min(abs(latency-to)); end;   matrix=matrix(:,from_elem:to_elem);   [m(1) n(1)] = size(matrix);   latencies(1,1:n(1)) = latency(from_elem:to_elem);else,   latencies(1,1:n(1)) = latency;end;if ~isempty(elplist),	nr_electrodes = 0;	for i=1:m(1),		pruef = 0;		for j=1:length(elplist),			if elplist(j)==i,				pruef = 1;				break;			end;		end;		if pruef==0,			nr_electrodes = nr_electrodes + 1;			arg(nr_electrodes) = i;		end;	end;	text = sprintf('Number of electrodes to be included in the following procedure: %d', nr_electrodes);   disp(text);   [m(1) n(1)] = size(matrix(arg,:));	data(1:m(1),1:n(1),1) =  matrix(arg,:);else,   [m(1) n(1)] = size(matrix);  	data(1:m(1),1:n(1),1) =  matrix;   disp(' All electrodes included in the following procedure ');end;text = sprintf('%d %d', m(1), n(1));disp(text);for i=2:nr_names,				% Reading in additional files	disp(namelist(i,:));	if strcmp(format, 'avr') | strcmp(format, 'avrnoref'), [matrix, latency] = read_avr(deblank(namelist(i,:))); end;	if strcmp(format, 'mfxtxt'), [matrix, latency] = read_mfxtxt(deblank(namelist(i,:)), 'l'); end;   if ~isempty(elplist),      matrix = matrix(arg,:);   end;   [m(i) n(i)] = size(matrix);   if (nargin>3),		% If from or to specified...  		if isempty(from), from_elem=1; else, [tmp, from_elem] = min(abs(latency-from)); end;   	if isempty(to), to_elem=n(i); else, [tmp, to_elem] = min(abs(latency-to)); end;   	matrix=matrix(:,from_elem:to_elem);	   [m(i) n(i)] = size(matrix);  		latencies(i,1:n(i)) = latency(from_elem:to_elem);   else,      latencies(i,1:n(i)) = latency;   end;   data(1:m(i),1:n(i),i) = matrix;   text = sprintf('%d %d', m(i), n(i));	disp(text);end;    % if strcmp(format, 'avr'),%   for i=1:nr_names,%      data(1:m(i),1:n(i),i) = avg_ref(data(1:m(i),1:n(i),i));%   end;% end;