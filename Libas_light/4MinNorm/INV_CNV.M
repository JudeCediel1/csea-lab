%   [elpsph, elpxyz, data, G, lfdmat, inv_sol] = inv_cnv('MadMac:matlab:data:aphasie:subjects', 'neuwvm.asc', [19 20 21 24 25 27 28 29], [1 2 3 4],  lfdmat);function [elpsph, elpxyz, data, G, lfdmat, inv_sol] = inv_cnv(pathname, namelist, elplist, subjlist, data, lfdmat);max_electrodes = 29;				% Number of electrodes in the files (number of columns), also includes virtual eye electrodes!nr_names = length(namelist(:,1));nr_subjects = length(subjlist); % Determine valid electrodes to be included in the following procedurenr_electrodes = 0;for i=1:max_electrodes,	pruef = 0;	for j=1:length(elplist),		if elplist(j)==i,			pruef = 1;			break;		end;	end;	if pruef==0,		nr_electrodes = nr_electrodes + 1;		arg(nr_electrodes) = i;	end;end; colours = char('r', 'b', 'g', 'm', 'c', 'y', 'b', 'w');if nr_names>length(colours),	disp('Not enough colours for all files! (cnv_pca)');end;if isempty(data),	disp('Reading in data, average referencing');	for i=1:nr_names,		name = sprintf('%s\\%s', pathname, namelist(i,:));		disp(name);		matrix = read_matrix(50,max_electrodes,name);		% 50 is upper bound		[m(i) n(i)] = size(matrix); 		data(1:m(i),:, i) =  matrix(:,arg);		data(1:m(i),:, i) = avg_ref(data(1:m(i),:, i)')';	end;end;size(data)disp('Reading in electrode locations');elpsph = read_elp('c:\Matlab\analysis\elp\26.elp');q = length(elpsph(1,:));elpxyz = elp2coor(elpsph, 1.0);elpsph(:,q+1:max_electrodes) = 0;		% "Filling in" virtual electrodes (e.g. virtual eye channels)elpxyz(:,q+1:max_electrodes) = 0;disp('Creating source space');diploc = srcspace_xyz(0.8, 0.1, -0.6);% dipsph = cart2polar(diploc);if isempty(lfdmat),	disp('Reading leadfield matrix');	lfdmat = read_matrix(6189, 21,  'c:\Matlab\analysis\elp\lead_noeog_08_01_-06.dat');	lfdmat = lfdmat';end;size(lfdmat)disp('Computing pseudoinverse');G = pinv_tikh(lfdmat(1:nr_electrodes,:), 1.0);disp('Computing inverse solutions');for i=1:nr_names,	inv_sol(:, 1:nr_subjects, i) = inv_recon(G, data(subjlist,:,i)', 3);end;disp('Viewing inverse solutions');fig = 1;for i=1:nr_names,	for j=1:nr_subjects,		figure(fig);		view_slices(diploc, inv_sol(:,j,i));		fig = fig +1;		outtext = sprintf('%s %d', namelist(i,:), subjlist(j));		set(gcf, 'Name', outtext);%		print -dmfile MadMac:matlab:data:aphasie:pictures:	end;end;