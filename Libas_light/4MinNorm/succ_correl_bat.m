% Compute correlation of rows of matrices from different files with first principle component of rows of matrix from first file in namelist% namelist contains the filenames with matrices, pathname the path where all these files are stored, elplist contains electrodes to be excluded% (e.g. virtual eye electrodes!)% OH 07.11.97  function [data, correl] = succ_correl_bat(pathname, namelist, elplist, max_electrodes, nr_timepoints, samplerate, offset, from, to, mst_flag);% max_electrodes = 29;				% Number of electrodes in the files (number of columns), also includes virtual eye electrodes!nr_names = length(namelist(:,1));% Determine valid electrodes to be included in the following procedurenr_electrodes = 0;for i=1:max_electrodes,	pruef = 0;	for j=1:length(elplist),		if elplist(j)==i,			pruef = 1;			break;		end;	end;	if pruef==0,				nr_electrodes = nr_electrodes + 1;		arg(nr_electrodes) = i;	end;end; colours = char('r', 'b', 'g', 'm', 'c', 'y', 'b', 'w');if nr_names>length(colours),	disp('Not enough colours for all files! (cnv_pca)');end; disp('Reading in data, average referencing');for i=1:nr_names,	name = sprintf('%s\\%s', pathname, namelist(i,:));	disp(name);	 [matrix, latencies] = read_data(name, max_electrodes, nr_timepoints, samplerate, offset);	 disp(name);	[m(i) n(i)] = size(matrix); 	data(1:nr_electrodes,:, i) =  matrix(arg, :);	data(:,from-1:to, i) = avg_ref(data(:,from-1:to, i));end;size(data)if ( strcmp(mst_flag, 'ang') | strcmp(mst_flag, 'rmsang')  | strcmp(mst_flag, 'angrms') ),	disp('Computing angles');	for i=1:nr_names,		correl(:,i) = succ_corr(data(:,:,i), from, to)';	end;   disp('Plotting angles');	clf;	for i=1:nr_names,		if i<length(colours),			c = colours(i);		else			c = 'b';		end;		plot(latencies(from:to), correl(:,i), c); hold on;	end;	legend(namelist(:,1:3), 1);  hold on;	axis([latencies(from)  latencies(to)  0  max(max(correl))]);	xlabel('Latenz');	ylabel('Winkel');	title('Winkel zwischen den Topographien aufeinanderfolgender Zeitpunkte');%	disp('Print to file');%	print -dmfile MadMac:matlab:data:aphasie:pictures:angles;end;if ( strcmp(mst_flag, 'rms') | strcmp(mst_flag, 'rmsang')  | strcmp(mst_flag, 'angrms') ),	disp('Computing root means squares');	for i=1:nr_names,		rmsvec(:,i) = rms(data(:,:,i), from, to)';	end;   disp('Plotting root mean squares');	figure(gcf+1);	clf;	for i=1:nr_names,		if i<length(colours),			c = colours(i);		else			c = 'b';		end;		plot(latencies(from:to), rmsvec(:,i), c); hold on;	end;	legend(namelist(:,1:3), 1);  hold on;	axis([latencies(from)  latencies(to)  0  max(max(rmsvec))]);	xlabel('Latenz');	ylabel('RMS');	title('Root Mean Squares (RMS)');	%	disp('Print to file');%	print -dmfile MadMac:matlab:data:aphasie:pictures:rms;end;%disp('Printing to file');%print -deps MadMac:matlab:data:aphasie:pictures:correl_pcacnv.eps;