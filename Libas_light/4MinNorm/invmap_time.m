function [diploc, lfdmat, data, G, invsol, elem] = invmap_time(lfdmat, regpar, pathname, namelist, pathout, elplist, locations, from, to);if nargin==0,   disp(' [diploc, lfdmat, data, G, invsol, elem] = invmap_time(lfdmat, regpar, pathname, namelist, pathout, elplist, locations, from, to); ');   return;end;isfrom = 1;if isempty(from),   isfrom=0;end;nr_names = length(namelist(:,1)); disp('Reading in data, average referencing');name = sprintf('%s\\%s', pathname, namelist(1,:));disp(name);[matrix, latencies] = read_avr(name);[m(1) n(1)] = size(matrix);disp(' Determine valid electrodes to be included in the following procedure');nr_electrodes = 0;for i=1:m(1),	pruef = 0;	for j=1:length(elplist),		if elplist(j)==i,			pruef = 1;			break;		end;	end;	if pruef==0,		nr_electrodes = nr_electrodes + 1;		arg(nr_electrodes) = i;	end;end;nr_electrodesif isfrom==0, from=1; to=n(1); end;n(1) = to-from+1;data(:,1:n(1), 1) =  matrix(arg,from:to);data(:,1:n(1), 1) = avg_ref(data(:,1:n(1), 1));m(1)for i=2:nr_names,				% Reading in additional files	name = sprintf('%s\\%s', pathname, namelist(i,:));	disp(name);   [matrix, latencies] = read_avr(name);   [m(i) n(i)] = size(matrix);    if isfrom==0, from=1; to=n(i); end;   n(i) = to-from+1;   data(:,1:n(i), i) =  matrix(arg,from:to);	data(:,1:n(i), i) = avg_ref(data(:,1:n(i), i));	m(i)end;disp('Reading dipole locations (diploc)');diploc = read_matrix(1384, 3, 'c:\Matlab\analysis\elp\diploc_sph_08_02_01_-06.dat');diploc = diploc';if isempty(lfdmat),	disp('Reading leadfield matrix (lfdmat)');	lfdmat = read_matrix(4152, 21, 'c:\Matlab\analysis\elp\lead21_pol_08_02_01_-06.dat');	lfdmat = lfdmat';	size(lfdmat)end; disp('Computing pseudoinverse (G)');G = pinv_tikh(lfdmat, regpar);size(G)[q, r] = when_changes_radius(diploc, 0.001);for i=1:length(locations(1,:)),   diff(1,:) = diploc(1,1:q(1)) - locations(1,i);      diff(2,:) = diploc(2,1:q(1)) - locations(2,i);   diff(3,:) = diploc(3,1:q(1)) - locations(3,i);   diff = norm_col(diff);   [Y,I] = min(diff);   elem(i) = 3*I;   koor(1:3,i) = diploc(:,elem(i)/3);   koor(4,i) = Y;   koor   clear diff;end;% Computing volume of one volume elementvolume = (4.0/3.0)*pi*(r(1)^3-r(2)^3)/q(1);disp('Computing and writing  inverse solutions (invsol)');dim = 1;for i=1:nr_names,   inv =  inv_recon(G(elem,:), data(1:nr_electrodes,1:n(i),i), dim);   inv = inv/volume;	invsol(:,1:n(i),i) =inv;	filename = sprintf('%s\\%smnrad.avr', pathout, namelist(i,1:3));	disp(filename);	fid = fopen(filename, 'w');	fprintf(fid, 'Npts= %d  TSB= 1.00  DI= 1.000  SB= 1.000  SC= 1.0\n', n(i));	[z s] = size(inv);	for i=1:z,		for j=1:s,			fprintf(fid, '%f ', inv(i,j));		end;		fprintf(fid, '\n');	end;	fclose(fid);end;