% Compute correlation of rows of matrices from different files with first principle component of rows of matrix from first file in namelist% namelist contains the filenames with matrices, pathname the path where all these files are stored, elplist contains electrodes to be excluded% (e.g. virtual eye electrodes!)% OH 07.11.97function [data, correl, meancor, pcr] = cnv_pca(pathname, namelist, elplist, pathout, nameout);if nargin==0,   disp(' [data, correl, meancor, pcr] = cnv_pca(pathname, namelist, elplist, pathout, nameout); ');   return;end;max_electrodes = 29;				% Number of electrodes in the files (number of columns), also includes virtual eye electrodes!nr_names = length(namelist(:,1));disp('Reading in data, average referencing');name = sprintf('%s\\%s', pathname, namelist(1,:));disp(name);[matrix, latencies] = read_avr(name);TSB(1) = latencies(1);if length(latencies)>1, DI(1)=latencies(2)-latencies(1); else DI(1)=1; end;[m(1) n(1)] = size(matrix);disp(' Determine valid electrodes to be included in the following procedure');nr_electrodes = 0;for i=1:m(1),	pruef = 0;	for j=1:length(elplist),		if elplist(j)==i,			pruef = 1;			break;		end;	end;	if pruef==0,		nr_electrodes = nr_electrodes + 1;		arg(nr_electrodes) = i;	end;end;nr_electrodesdata(:,1:n(1), 1) =  matrix(arg,:);data(:,1:n(1), 1) = avg_ref(data(:,1:n(1), 1));for i=2:nr_names,				% Reading in additional files	name = sprintf('%s\\%s', pathname, namelist(i,:));	disp(name);   [matrix, latencies] = read_avr(name);   TSB(i) = latencies(1);   if length(latencies)>1, DI(i)=latencies(2)-latencies(1); else DI(i)=1; end;   [m(i) n(i)] = size(matrix);    data(:,1:n(i), i) =  matrix(arg,:);	data(:,1:n(i), i) = avg_ref(data(:,1:n(i), i));	n(i)end;colours = char('r', 'b', 'g', 'm', 'c', 'y', 'b', 'w');if nr_names>length(colours),	disp('Not enough colours for all files! (cnv_pca)');end;norm_data = normalize(data(:,1:n(1),1));disp('Compute principal components of normalized first data file');[pcc pcr] = princ_comp(norm_data);disp('Computing correlations');for i=1:nr_names,	correl(1:n(i),i) = correl_mat(data(:,1:n(i),i)', pcc');end;disp('Computing mean correlations');for i=1:nr_names,	meancor(i) = mean(correl(1:n(i),i));end;disp('Plotting');clf;for i=1:nr_names,	if i<length(colours),		c = colours(i);	else		c = 'b';	end;	plot(correl(1:n(i),i), c); hold on;end;legend(namelist(:,1:3), 1);  hold on;for i=1:nr_names,	if i<length(colours),		c = sprintf('%so', colours(i));	else		c = 'bo';	end;	plot(meancor(i), c); hold on;end;title('Korrelation der CNVs der Probanden mit der ersten Hauptkomponente der CNVs der Kontrollgruppe');if ~isempty(pathout) & ~isempty(nameout),   filename = sprintf('%s\\%s', pathout, nameout);   write_matrix(correl, filename);end;%disp('Printing to file');%print -deps MadMac:matlab:data:aphasie:pictures:correl_pcacnv.eps;