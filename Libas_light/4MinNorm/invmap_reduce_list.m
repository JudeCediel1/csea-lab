function [diploc, lfdmat, data, G, invsol, paths, names] = invmap_reduce_list(lfdmat1, dim, regpar, paths, names, pathout, elplist, locations, from, to, out_flag);if nargin==0,   disp(' [diploc, lfdmat, data, G, invsol, paths, names] = invmap_reduce_list(lfdmat1, dim, regpar, paths, names, pathout, elplist, locations, from, to, out_flag); ');   return;end;isfrom = 1;if isempty(from),   isfrom=0;end;if isempty(names),   [namelist, names, paths] = read_filelist('*.avr');   nr_names = length(namelist(:,1));else   nr_names = length(names(:,1));   for i=1:nr_names,      namelist(i,1:length(names(i,:))+length(paths(i,:))) = sprintf('%s%s', paths(i,:), names(i,:));   end;end;disp('');disp(' Reading in data, average referencing');disp('');disp(namelist(1,:));[matrix, latencies] = read_avr(deblank(namelist(1,:)));[m(1) n(1)] = size(matrix);nr_electrodes = 0;for i=1:m(1),	pruef = 0;	for j=1:length(elplist),		if elplist(j)==i,			pruef = 1;			break;		end;	end;	if pruef==0,		nr_electrodes = nr_electrodes + 1;		arg(nr_electrodes) = i;	end;end;text = sprintf('Number of electrodes to be included in the following procedure: %d', nr_electrodes);disp(text);if isfrom==0, from=1; to=n(1); end;n(1) = to-from+1;data(:,1:n(1), 1) =  matrix(arg,from:to);data(:,1:n(1), 1) = avg_ref(data(:,1:n(1), 1));disp(m(1));for i=2:nr_names,				% Reading in additional files	disp(namelist(i,:));   [matrix, latencies] = read_avr(deblank(namelist(i,:)));   [m(i) n(i)] = size(matrix);    if isfrom==0, from=1; to=n(i); end;   n(i) = to-from+1;   data(:,1:n(i), i) =  matrix(arg,from:to);	data(:,1:n(i), i) = avg_ref(data(:,1:n(i), i));	disp(m(i));end;disp('');disp(' Reading dipole locations (diploc) ');disp('');diploc = read_matrix(1384, 4, 'c:\Matlab\analysis\elp\diploc_sph_08_02_01_-06.dat');diploc = diploc';if isempty(lfdmat1),   disp('');   disp(' Reading leadfield matrix (lfdmat) ');   disp('');	lfdmat = read_matrix(4152, 21, 'c:\Matlab\analysis\elp\lead21_pol_08_02_01_-06.dat');	lfdmat = lfdmat';	disp(size(lfdmat));end;if nr_electrodes~=length(lfdmat1(:,1)),   disp('');   disp(' Resizing and reaveragereferencing leadfield matrix ');   disp('');   lfdmat = lfdmat1(arg,:);   lfdmat = avg_ref(lfdmat);else   lfdmat = lfdmat1;end;    disp('');disp(' Computing pseudoinverse (G) ');disp('');G = pinv_tikh(lfdmat, regpar);disp(size(G));disp('');disp(' Computing residual variances ');disp('');nsum = 0;sumvar = 0;for i=1:nr_names,   inv = G*data(1:nr_electrodes,1:n(i),i);   variances = res_var(lfdmat, inv, data(1:nr_electrodes,1:n(i),i))';   minvar(i) = min(variances);   maxvar(i) = max(variances);   sumvar(i) = sum(variances);   nsum = nsum+n(i);   text = sprintf('Min: %f   Max: %f   Mean: %f', minvar(i), maxvar(i), sumvar(i)/n(i));   disp(text);   clear inv;end;text = sprintf('Over all:    Min: %f   Max: %f   Mean: %f', min(minvar), max(maxvar), sum(sumvar)/nsum); disp(text);[q, r] = when_changes_radius(diploc(1:3,:), 0.001);% Finde Quellenorte nahe den angegebenen Positionen for i=1:length(q),   for j=1:length(locations(1,:)),     if i==1,		% oberste Schicht         diff(1,:) = diploc(1,1:q(1)) - locations(1,j);            diff(2,:) = diploc(2,1:q(1)) - locations(2,j);         diff(3,:) = diploc(3,1:q(1)) - locations(3,j);         offset = 0;			% Anzahl der Punkte in oberen Schichten     else         	  		diff(1,:) = diploc(1,q(i-1)+1:q(i)) - locations(1,j);            diff(2,:) = diploc(2,q(i-1)+1:q(i)) - locations(2,j);         diff(3,:) = diploc(3,q(i-1)+1:q(i)) - locations(3,j);         offset = q(i-1);       end;        	  diff = norm_col(diff);	  [Y,I] = min(diff);     elem(i,j) = offset+I;				% Indizes der nahesten Quellenraumelemente     if strcmp(out_flag, 'abs'),     		for k=1:dim,        		elem_G(i,(j-1)*dim+k) = dim*elem(i,j)-dim+k;         end;     end;     if strcmp(out_flag, 'rad'),        	elem_G(i,j) = elem(i,j)*dim;     end;  	  koor(1:3,i,j) = diploc(1:3,elem(i,j)); 	  koor(4,i,j) = Y;     clear diff;  end;end;disp('Computing and writing  inverse solutions (invsol)');	offset = 0;	for i=1:nr_names,      for j=1:length(q),         size(elem_G);         invsol(offset+1:offset+length(elem_G(j,:))/dim,1:n(i),i) = inv_recon(G(elem_G(j,:),:), data(1:nr_electrodes,1:n(i),i), dim);         if strcmp(out_flag, 'abs'),				filename = sprintf('%s\\%smn%d.avr', pathout, names(i,1:3), j);      	end;      	if strcmp(out_flag, 'rad'),				filename = sprintf('%s\\%smnrad%d.avr', pathout, names(i,1:3), j);      	end;			disp(filename);	      fid = fopen(filename, 'w');         write_avr(invsol(offset+1:offset+length(elem_G(j,:))/dim,1:n(i),i), filename, 1, 1);         offset = offset+length(elem_G(j,:))/dim;		end;			% j   end;		% i      