%   hopefully this will do everything!!!! %   must have a subject_data.txt file ordered in sequence%   from a ... z (figure that out..)%        %   read channel data            clear eeg_data;        fid = fopen('G:\MatlabR12\work\channels_excluded_eeg_carsten.txt');    number_subjects_pre = fscanf(fid,'%d',1);     total_channels = fscanf(fid,'%d',1);        read_count = 1;    while read_count ~= total_channels + 1        channel_exclude(read_count, 1:number_subjects_pre) = fscanf(fid,'%d',[1,number_subjects_pre]);        channel_total(read_count) = sum(channel_exclude(read_count, : ));        read_count = read_count + 1;    end;        fclose(fid);    %   read subject file information            read_names_count = 1;    fid = fopen('G:\MatlabR12\Work\subjects_data_eeg_carsten.txt');    frewind(fid);    read_count = 1;    read_names_count = 1;    number_subjects = fscanf(fid,'%d',1);    number_conditions = fscanf(fid,'%d',1);    if number_subjects_pre ~= number_subjects        fprintf( 'error in file reading, check that both files are congruent \n' );    end;    while read_count ~= ((number_subjects * number_conditions) +1)        Subject(read_names_count).name = fscanf(fid,'%s',1);        Subject(read_names_count).channels = fscanf(fid, '%d', 1);        for i = 1:number_conditions            Subject(read_count -1 + i).path = fscanf(fid,'%s',1);                    end;        read_count = read_count + number_conditions;        read_names_count = read_names_count + 1;    end;        fprintf( '\nsubject information read\n\n' );    %   read eeg data            subject = 1;        while subject ~= (number_subjects_pre + 1)                file_number = 1;                while file_number ~= number_conditions + 1                        where = file_number + (subject * number_conditions) - number_conditions;            pathname = Subject(where).path;            %fprintf('file = %s \n', pathname);            fid=fopen(pathname);                        for then = 1:5                null(then).void = fscanf(fid, '%s', 1);                line(then).entry = fscanf(fid, '%f', 1);            end;                                   read_channel = 1;            % read data from files             output_channel = 1;            while read_channel ~= total_channels + 1                            %fprintf( '%d \n', read_channel );                proportion = channel_total(read_channel)/number_subjects_pre;                if proportion > 0.8                	if channel_exclude(read_channel, subject) == 1                 		eeg_data(subject, file_number, output_channel, :) = fscanf(fid,'%f',[1,line(1).entry]);                	end;                	if channel_exclude(read_channel, subject) == 0                		eeg_data(subject, file_number, output_channel, :) = 0;                	end;                	output_channel = output_channel + 1;                end;                                accept_channel(read_channel) = proportion;                                read_channel = read_channel + 1;            end;                        fclose(fid);                                    file_number = file_number + 1;                                        end;                fprintf('Subject %s read\n', Subject(subject).name);                 subject = subject + 1;    end;    fprintf( '\nall subject data read\n\n' );        perm = 1;    output_channel = output_channel - 1;    baseline_time_long = line(2).entry / line(3).entry;    rem_base = rem(baseline_time_long,1);    baseline_time = baseline_time_long - rem_base;    	if baseline_time < 0        baseline_time = 0 - baseline_time;    end;    epoch_time = line(1).entry - baseline_time;           %   get_data    for sub_num = 1:number_subjects_pre        for chan_num = 1:output_channel            for time_num = 1:line(1).entry                eeg_diff_data(1,sub_num,chan_num,time_num) = eeg_data(sub_num, 1, chan_num, time_num) - eeg_data(sub_num, 2, chan_num, time_num); %begin - end                eeg_diff_data(2,sub_num,chan_num,time_num) = eeg_data(sub_num, 1, chan_num, time_num) - eeg_data(sub_num, 3, chan_num, time_num); %begin - middle                eeg_diff_data(3,sub_num,chan_num,time_num) = eeg_data(sub_num, 1, chan_num, time_num) - eeg_data(sub_num, 4, chan_num, time_num); %middle - end                            end;        end;    end;     for temp = 1:epoch_time                time_points(temp) = temp * line(3).entry;           end;         for compare = 1:3        fprintf( 'calculating baseline distribution %d \n', compare );        clear t_value_baseline;        clear temp_baseline_array;            for perm_num = 1:15000                    clear std_temp_baseline_array;            clear mean_temp_baseline_array;            for chan_num_all = 1:output_channel                                cond = randperm(2);%               rand('state',sum(100*clock));                time_point = randperm(baseline_time);                 chan_num = randperm(output_channel);                                for subject = 1:number_subjects_pre                                       thing = eeg_diff_data(compare, subject, chan_num(1), time_point(1));                    if cond(1) == 1                        temp_baseline_array(subject) = 0 - thing;                    end;                    if cond(1) == 2                        temp_baseline_array(subject) = thing - 0;                    end;                end;				                std_temp_baseline_array = std(temp_baseline_array);                mean_temp_baseline_array = mean(temp_baseline_array);                und = sqrt(number_subjects_pre);                                                                pre_t_value_baseline = mean_temp_baseline_array/(std_temp_baseline_array/und);                 pre_squ_t_value_baseline(chan_num_all) = pre_t_value_baseline * pre_t_value_baseline;                            end;                            t_value_baseline(perm_num) = sum(pre_squ_t_value_baseline);                if rem(perm_num,5000)==0   %calculates remainder when dividing by 5000, if zero, then prints the following:                 fprintf('\treading permutation : %d\n', perm_num);             end;                 end;             t_values_distribution = sort(t_value_baseline);%		Schon vergessen was das unten tut       %        t_values_dist_temp = sort(t_value_baseline);%        for perm_thing = 1:15000%            t_values_distribution(perm_thing) = t_values_dist_temp(perm_thing);           %        end;                x = 0:1:200;        if compare == 1            figure(1)            plot(hist(t_values_distribution,x));            print -djpeg -f1 -r300 dist_hist_1_2;        end;        if compare == 2            figure(1)            plot(hist(t_values_distribution,x));            print -djpeg -f1 -r300 dist_hist_2_2;        end;        if compare == 3            figure(1)            plot(hist(t_values_distribution,x));            print -djpeg -f1 -r300 dist_hist_3_2;        end;                    fprintf( 'calculated baseline distribution %d \n', compare );         for temp_time_num = 1:epoch_time            time_num = temp_time_num + baseline_time;            for chan_num = 1:output_channel                   for subject = 1:number_subjects_pre                                    temp_epoch_array(subject) = eeg_diff_data(compare, subject, chan_num, time_num);                end;                std_temp_epoch_array = std(temp_epoch_array);                mean_temp_epoch_array = mean(temp_epoch_array);                und = sqrt(number_subjects_pre);                                                                pre_t_value_epoch = mean_temp_epoch_array/(std_temp_epoch_array/und);                 pre_squ_t_value_epoch(chan_num) = pre_t_value_epoch * pre_t_value_epoch;                                end;                    t_value_epoch(compare, temp_time_num) = sum(pre_squ_t_value_epoch);                                                t_value_epoch_temp = t_value_epoch(compare, temp_time_num);            k = 1;            on = 0;            while on == 0                if t_value_epoch_temp > t_values_distribution(k)                    k = k + 1;                else                                        p_value(compare, temp_time_num) = (15000 - k)/15000;                    on = 1;                end;                if k > 15000                    p_value(compare, temp_time_num) = 0;                    on= 1;                end;            end;             if temp_time_num == epoch_time                if compare == 3                    figure(1)                    plot(time_points(:),p_value(1,:), 'b');                    hold on                    plot(time_points(:),p_value(2,:), 'm');                    hold off                    hold on                    plot(time_points(:),p_value(3,:), 'r');                    hold off                    print -djpeg -f1 -r300 perm_test_p_values_2;                end;                         end;        end;          end;    filename = 'eeg_p_values_2'    	eval(['save ' eeg_p_values_2 '.txt p_value -ascii']);			