% berechnet Meanpotentials aus ATG.ar konstanz file fuer ein anzugebendes Zeit-% fenster im Batchbetriebfunction [] = mnavr2grandmean( bed, ascii1_name);%clearif nargin < 2ascii1_name = input ('ascii name for result?      ','s')endif nargin < 1bed = input ('name of condition?         ','s')end%timewins = [425 475]  % N1ipsi in emolat= [228 243] =>155-186ms					  % p300 in emolat= [280 300]	=>260-300ms							  % LPC in emolat = [325 375] => 350-450ms					  % P1contra  = [190 200] => 80-100ms					  % P1ipsi = [200 210] => 100-120ms					  % N1contra = [210 220] => 120-140ms					  % Nanterior = [250 300] => 200-300ms					  % spaetst = [400:512] =>500-722ms%timewins = input (' time window to select and average? (in samppoints) (form: [x y; a b; etc])    ');%trans = input ('transformiere nach MCCarthy and wood (y/n)?   ','s')bslvec = [49:75];%bslvec = input('baseline (sample points a:b)      ');vps = ['IA01';'IA04';'IA05';'IA06';'IA07';'IA08';'IA09';'IA11';'IA16';'IA17';'IA21']; % IAPS%vps = ['02';'04';'05';'06';'07';'08';'09';'10';'11';'12';'14'];  %brot%vps = ['HS97001_';'HS97003_';'HS98005_';'HS98009_';'HS98011_';'HS98013_';'NS98004_';'NS98006_';'NS98007_';'NS98008_';'NS98010_'; 'NS98012_'];   %hypno%vps = ['02';'05';'07';'09';'10';'11';'14';'15';'16';'17'] % emolat%vps = ['01';'02';'04';'05';'06';'07';'08';'09';'10';'11';'12']%vps = ['02';'03';'04';'05';'06';'07';'08';'11';'13';'15']ascii1_name pfad = ['ElNino:AS_Exps:iaps:atgfiles']%  pfad = ['UBIES:iaps:atgfiles']% pfad = ['UBIES:bruno:erps']for vpindex = 1 : size(vps,1)   % schleife ueber subjects  vp = vps(vpindex,:); file = [  vp  '.merge.at' bed '.avr.MN3'];% file = [ vp '.Merge.at' bed]%file = [ bed vp '.fl40.E1.atg.ar' ]FilePath = [ pfad ':' file]% baseline abziehen[ERPmat] = read_avr(FilePath);   % liest einif vpindex == 1summat = ERPmat;elsesummat = summat + ERPmat;end% berechne  meanpotentials %  % transformiere nach MCCarty and wood%     %     if trans == 'y'%         for t = 1 : length (BslCorMat);%             teilmat = BslCorMat(:,t);%             minimum = min(teilmat);%             maximum = max(teilmat);%             %             for elek = 1 : 129%                 neumat(elek, t) = (BslCorMat(elek,t)-minimum)/(maximum - minimum);%             end%         end     endsummat = summat ./ vpindex;    % schreibe gemittelte werte fuer jede elektrode in superanova-format 	write_avr(summat, ascii1_name, 1, 4) disp ('saving file'), disp (ascii1_name)clear 