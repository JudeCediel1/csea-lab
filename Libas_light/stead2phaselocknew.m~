%==================================================================%%	stead2phaselock%% sliding window procedure%%!!!!!!!!!!! enter pairs as twocolumn-matrix%	%	Function definition function [phaselock_time, pairsynchmat, movmat] = stead2phaselocknew(filemat, pairmat, bslvec, plotflag);    if nargin < 2, plotflag = [], end % this to be done outside the loop to save time, needed for winshift proc tempvec = [18 18 18 18 18 18 17]; % this makes sure that average win duration is exactly 17.8571, which is the duration in sp of one cyle at 14 Hz = 71.42 ms, sampled at 250 Hz longvec = repmat(tempvec,1,20); % repeat this many times, at leats for duration of entire epoch, subsegments are created later  winshiftvec_long = cumsum(longvec)+ ssvepvec(1); % use cumsum function to create growing vector of indices for start of the winshift tempindexvec = find(winshiftvec_long > ssvepvec(length(ssvepvec)));  endindex = tempindexvec(1);  % this is the first index for which the winshiftvector exceeds the data segment  winshiftvec = winshiftvec_long(1:endindex-5)   for fileindex = 1 : size(filemat,1);    	FilePath = filemat(fileindex,:);   			[rawmat,File,Path,FilePath,NTrialAvgVec,StdChanTimeMat,...		SampRate,AvgRef,Version,MedMedRawVec,MedMedAvgVec,EegMegStatus,NChanExtra]= ReadAvgFile(FilePath);		%============================================================	% 2. Baseline correction	%===========================================================		disp ('subtracting baseline')	    datamat = bslcorr(rawmat, bslvec);	%===========================================================	% 3. moving window procedure with 4 cycles @ 14 Hz !!!	% 	%===========================================================	disp('moving window procedure')		winmatsum = zeros(size(datamat,1),72); %4 cycles		if plotflag, h = figure, end           for winshiftstep = 1:length(winshiftvec)		        winmatsum = (winmatsum + regressionMAT(datamat(:,[winshiftvec(winshiftstep):winshiftvec(winshiftstep)+71])));                     if plotflag           subplot(2,1,2), plot(1:4:72*4, regressionMAT(datamat(:,[winshiftvec(winshiftstep):winshiftvec(winshiftstep)+71]))'), title(['sliding window starting at ' num2str((winshiftvec(winshiftstep))*4)  ' ms ']), xlabel('time in milliseconds')           subplot(2,1,1), plot(1:4:72*4, winmatsum'), title(['sum of sliding windows; number of shifts:' num2str(winshiftstep) ]), ylabel('microvolts')            %  subplot(3,1,3), hold on, circle([0,0],1,200,'-');            %  plot([0;(imag(fouriercomp(120)./tenHZampfft(120)))], [0;(real(fouriercomp(120)./tenHZampfft(120)))]);title('phase angle of window')            pause(.4)       end          %    movmat(index) = getframe(h)     end        winmat = winmatsum./length(winshiftvec);       	%===========================================================	% 5. determine amplitude and Phase using fft	%===========================================================	disp ('determining 14 Hz Phase per channel')			% for fft with amplitude scaling:		NFFT = 71; 	NumUniquePts = ceil((NFFT+1)/2); 	fftMat = fft (winmat', 71);  % transpose: channels as columns (fft columnwise)	Mag = abs(fftMat);                                                   % Amplitude berechnen	Mag = Mag*2;   		Mag(1) = Mag(1)/2;                                                    % DC trat aber nicht doppelt auf	if ~rem(NFFT,2),                                                    % Nyquist Frequenz (falls vorhanden) auch nicht doppelt        Mag(length(Mag))=Mag(length(Mag))/2;	end		Mag=Mag/NFFT;                                                         % FFT so skalieren, da? sie keine Funktion von NFFT ist		fftamp = Mag(5,:);        ampmat = [ampmat fftamp'];         end % trials	% 	% 	%===========================================================% 	% 6. bestimmung der mittleren Amplitude mit diffferenz(max-min)% 	%===========================================================% 	% 	Phasevec = Phasevec';% 	tenHZampfft = tenHZampfft';% 	 	SaveAvgFile([FilePath '.STamp' ],ampmat,[],[],SampRate,[],[],EegMegStatus)%         % 	SaveAvgFile([FilePath '.win' ],winmat,NTrialAvgVec,[],SampRate,MedMedRawVec,MedMedAvgVec,EegMegStatus)%         % 	SaveAvgFile([FilePath '.pha' ],Phasevec,NTrialAvgVec,[],SampRate,MedMedRawVec,MedMedAvgVec,EegMegStatus)end