% multiTtest% berechnet multiple Ttests ueber input matrix, gem... groupingvariablenfunction[SigMat, NrDivisions, Divisions]= multiTtest(InMat, groupColInd);if nargin < 2	groupColInd = input('insert index of group variable column');end%ersetze alle -1 in InMat durch 0% minvec = find(InMat(:,[groupColInd+1:length(InMat(1,:))]) == -1);% InMat(minvec) = 0;% InMat = sparse(InMat);% 1. bestimme anzahl der bedinungen / subdivisonscondvec = [-1 1:100]; % maximale anz divisionsDivisionhist = hist(InMat(:, groupColInd), condvec);Dividummy = find(Divisionhist>=1);  % indices nur divisions mit mûglichem N>20NrDivisions = length(Dividummy);Divisions = condvec(Dividummy);SigVec = [];SigMat = [];for divi = 1 : NrDivisions; % schleife Äber divisons		diviIndexVec = find(InMat(:,groupColInd)== Divisions(divi));	NONdiviIndexVec = find(InMat(:,groupColInd)~= Divisions(divi));		% fÄhre ttests durch			for question = 2:length(InMat(1,:)); % schleife Äber fragen				[tVal, greatFlag] = Ttest(nonzeros(InMat(diviIndexVec,question)), nonzeros(InMat(NONdiviIndexVec,question)));				if length(nonzeros(InMat(diviIndexVec,question)))< 20         	if abs(tVal)>3.1            	SigVec(question-1)= 2;			elseif abs(tVal)>1.9 & abs(tVal)<3.1            	SigVec(question-1)= 1;			else            	SigVec(question-1)= 0;			end		else	         	if abs(tVal)>2.38            	SigVec(question-1)= 2;			elseif abs(tVal)>1.7 & abs(tVal)<2.38            	SigVec(question-1)= 1;			else            	SigVec(question-1)= 0;			end		end				end	SigMat = [SigMat; SigVec]; 	end