function[AvgWaPower, SumPower]  = WA_app_sara(directory)% %% %  % f0_start and f_end are NOT Frequencies but% Indices, i.e when  Epoch is 2048 points l% (after Zeropadding) and Samplingrate is 500 Hz % resolution in frequency domeain is fa = 500/2048 = 0.244.% fa * fO_start = real start frequency% fa * f0_end  = real end freq%  Wavelets are computed for each delta_f0 point, to save memory%% example:%% 500/2048 = 0.244;% 10 * 0.244  = 2.44 Hz Startfrequenz% 250 * 0.244 = 61 Hz Endfrequenz% 2.44 : 5*0.244 : 61 = 49 rows Wavelet%% write setting to source code%%  Keil & Gruber, 1999%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%EPsubFlag = 0resize_flag = 1     % 1 : Resizefunktion on (siehe Zeile 111)					% 0 : Resizefunktion off	                    % ueberfluessige Werte durch Zeropadding fliegen raus und nur jeder                     % <resize_step> .te Wert wird gespeichertresize_step = 5     % Schrittweite der Resizefunktion				    % (1 : jeder Wert wird geschrieben)                    % ACHTUNG: dies muss natuerlich bei der Achsenbeschriftung                    % mit make_xy_wa beruecksichtigt werden                    Phase_lock_flag = 1 % 1 : Phaselockfaktor Datei wird erzeugt						  % 0 : Phaselockfaktor Datei wird nicht erzeugt						  						  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%   code:						  testmat = []; [filemat, path, nrfiles] = getfilesindir(directory);FilePath = path;disp('electrodes to analyze');electrodes = [1:129];   %Electrodes to analyzedelta_f0 = 8f0_start = 25f0_end = 400%Schleife ueber filesfor nf = 1 : size(filemat,1)  file_name = [filemat(nf,:)]  [data,Version,LHeader,ScaleBins,NChan,NPointsold,NTrials,SampRate,ch_AvgRef]=ReadAppData(file_name);  disp('size of data matrix')  disp(size(data))  % Npoints runden auf naechste 2erpotenz  matsize = 2;  potsize = 2;  while matsize < NPointsold;  potsize = potsize + 1;  matsize = 2^potsize;  end  NPointsNew = matsize;  wavelet = gener_wav(NPointsNew, delta_f0, f0_start, f0_end);  disp('size of waveletMatrix')  disp(size(wavelet))  disp (' frequency step for delta_f0 = 1 is ')  disp(SampRate/NPointsNew)      % Berechnung der WA  SumPower = [];  AvgWaPower = [];      %schleife ueber KANAELE  for e  = 1 :  size(electrodes,2);     channel = electrodes(e);      % schleife ueber TRIALS	  for trial = 1 : NTrials;         %fprintf('wa of channel %g , trial %g of %g   ',channel, trial, NTrials)		 [data]=ReadAppData(file_name, trial, channel);		% plot(data'), pause		 % daten padden bis N = NPoints = 2^X       % dazu: daten auf jeden fall als ZEILENVEKTOR !!!!            			a = size(data);               if a (1) ~= 1                  data = data';               end                      data_pad = [data'; zeros(NPointsNew-NPointsold,1)];                     [WAPower, WARayleigh]=wa_new(data_pad, wavelet, NPointsNew, delta_f0, f0_start, f0_end,NPointsold);	  	   testmat(e,trial) = max(max(WAPower));		                     if trial == 1		 SumPower = WAPower;       SumRayleigh = WARayleigh;       else        SumPower = SumPower + WAPower;       SumRayleigh = SumRayleigh+WARayleigh;         	 end           end     fprintf('writing channel # %g to Average Matrix', e)          if resize_flag == 1 		        % !!!!!!!!!!!!!!!! RESIZE FUNKTION !!!!!!!!!!!!!!!!!!!       % damit die matrix nicht zu gross wird       % !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!	          disp('resizing matrix')       SumPower = SumPower(:, [1:resize_step:NPointsold]);       SumRayleigh = SumRayleigh(:, [1:resize_step:NPointsold]);     end;          AvgWaPower(e,:,:) = SumPower./NTrials;     PhasLockfac(e,:,:) = abs(SumRayleigh ./NTrials) ;     SumPower = [];     SumRayleigh = [];          end     disp('saving to disk:   ')   disp([file_name '.wa.mat'])    eval([' save ' [file_name]  '.wa.mat  AvgWaPower -mat'])  	if Phase_lock_flag == 1     eval([' save ' [file_name]  '.RA.mat  PhasLockfac -mat']) 	end;    AvgWaPower = [];   PhasLockfac = [];	fclose ('all')	end;	