function[]  = WA_app_baby_time(files)% function[]  = WA_app()%% Nur fuer insider%  % f0_start und f_end entsprechen NICHT Frequenzen sondern% Datenpunkten, d.h. wenn die Epoche z.B. 2048 Punkte lang ist% (nach dem Zeropadding) und eine Samplingrate von 500 Hz verwendet wurde% ergibt sich eine Frequenzaufloesung von fa = 500/2048 = 0.244.% fa * fO_start ergibt die tatsaechliche Startfrequenz% fa * f0_end ergibt die tatsaechliche Endfrequenz% Die Wavelets werden nicht fuer jeden Punkt sondern fuer jeden% delta_f0ten Punkt berechnet, um Speicher zu sparen%% Ergibt sich also z.B. ein Wavelet mit 49 Zeilen, f0_start bei 10% und F0_end von 250 und delta_f0 von 5 und 500 Hz ergibt sich:%% 500/2048 = 0.244;% 10 * 0.244  = 2.44 Hz Startfrequenz% 250 * 0.244 = 61 Hz Endfrequenz% 2.44 : 5*0.244 : 61 = 49 Zeilen im Wavelet%% Paramenter sind im Sourcecode einzutragen%% Das Programm erzeut 2 files (Endungen WA und RA)% in denen die spektrale Power (WA) und der Phaselockingfaktor (RA)% abgespeichert werden (vgl Tallon et al, 1997)% (die Matrix RA kann mit der Pruefgroesse R auf Signifikanz%  ueberpruft werden (vgl. Dissertation Wienbruch, Kapitel 2, Formel 51)%% infant data: frq resolution: 0.3906%	% delta_f = 200/512 = 0.3906% taxis = -600:5:1495% faxis_total = 0: 0.3906: 180%		% (c) Keil & Gruber, 1999%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%EPsubFlag = 0resize_flag = 1     % 1 : Resizefunktion an (siehe Zeile 111)						  % 0 : Resizefunktion aus	                    % ueberfluessige Werte durch Zeropadding fliegen raus und nur jeder                     % <resize_step> .te Wert wird gespeichertresize_step = 1     % Schrittweite der Resizefunktion						  % (1 : jeder Wert wird geschrieben)                    % ACHTUNG: dies muss natuerlich bei der Achsenbeschriftung                    % mit make_xy_wa beruecksichtigt werden                    Phase_lock_flag = 1 % 1 : Phaselockfaktor Datei wird erzeugt						  % 0 : Phaselockfaktor Datei wird nicht erzeugt	                                        %files = ['connor600_2100.E1.appg'];FilePath = pwddisp('electrodes to analyze');electrodes = [1:65]   %Electrodes to analyzedelta_f0 = 2f0_start = 26     % f0_end = 34      % ending frequency: %Schleife ueber filesfor nf = 1 : size(files,1)  file_name = [files(nf,:)]  [data,Version,LHeader,ScaleBins,NChan,NPointsold,NTrials,SampRate,ch_AvgRef]=ReadAppData(file_name);  disp('size of data matrix:')  disp(size(data))    fclose('all');  % Npoints runden auf naechste 2erpotenz  matsize = 2;  potsize = 2;  while matsize < NPointsold;  potsize = potsize + 1;  matsize = 2^potsize;  end  NPointsNew = matsize;  wavelet = gener_Wav(NPointsNew, delta_f0, f0_start, f0_end);  disp('size of waveletMatrix:')  disp(size(wavelet))  disp (' frequency step for delta_f0 = 1 is ')  disp(SampRate/NPointsNew)  disp (' current wavelet family covering frequency range from ... to: ')  disp([f0_start .*SampRate/NPointsNew; f0_end .* SampRate/NPointsNew])      % Berechnung der WA  SumPower = [];  AvgWaPower = [];  bslPower = [];   stimPower = [];    %schleife ueber KANAELE  for e  = 1 :  size(electrodes,2);     channel = electrodes(e);         if channel/10 == round(channel/10)        fprintf('wa of channel %g   ',channel)        fprintf('\r'),        end                fprintf('.')        	 % schleife ueber TRIALS	  for trial = 1 : NTrials;        		 [data]=ReadAppData(file_name, trial, channel);		 % daten padden bis N = NPoints = 2^X       % dazu: daten auf jeden fall als ZEILENVEKTOR !!!!            			a = size(data);               if a (1) ~= 1                  data = data';               end                       data_pad = [data'; zeros(NPointsNew-NPointsold,1)];              [WAPower]=wa_new(data_pad, wavelet, NPointsNew, delta_f0, f0_start, f0_end,NPointsold);       		 		bslPower(e, trial) = mean(mean(WAPower(:, [40:109])));		stimPower(e, trial) = mean(mean(WAPower(:, [240:320])));			      end     end       fclose('all');    disp('saving to disk:   ')    disp([file_name '.wa.dat'])    eval([' save ' [file_name]  '.wabsl.dat  bslPower -ascii'])    eval([' save ' [file_name]  '.wastim.dat  stimPower -ascii'])    AvgWaPower = [];  	end;	