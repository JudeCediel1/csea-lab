% magno_waveletfunction [WaPower] = wavelet_app_yuelu(filemat, f0start, f0end, fdelta, refelec); if nargin < 5,     refelec = []; end% 1. read data to get info SampRate = 500; for fileindex = 1:size(filemat,1) a = load(deblank(filemat(fileindex,:)));  data = a.mat3d;   NPointsNew = size(data,2);     NTrials = size(data,3);       % compute wavelets and their parameters   wavelet = gener_wav(NPointsNew, fdelta, f0start, f0end);   disp('size of waveletMatrix')  disp(size(wavelet))  disp (' frequency step for delta_f0 = 1 is ')  disp(SampRate/NPointsNew)        % create 3d matrix objects for wavelet   % channels * time * frequencies       waveletMat3d = repmat(wavelet, [1 1 size(data,1)]);     waveletMat3d = permute(waveletMat3d, [3, 2, 1]);         % loop over trials        disp(['trial index of '])    disp(NTrials)        for trialindex = 1:NTrials;                  Data = data(:,:,trialindex);                fprintf('.')                 if trialindex/10 == round(trialindex/10), disp(trialindex), end            Data = bslcorr(Data, 1:100);                size(Data);        % window data with cosine square window        window = cosinwin(20, size(Data,2), size(Data,1));         Data = Data .* window;                 data_pad3d = repmat(Data, [1 1 size(wavelet,1)]);             % transform data  to the frequency        data_trans = fft(data_pad3d, NPointsNew, 2);        thetaMATLABretrans = [];         ProdMat= waveletMat3d .*(data_trans);        thetaMATLABretrans = ifft(ProdMat, NPointsNew, 2);                % standardize instantaneous phase        stdcomplexphasemat = thetaMATLABretrans ./ abs(thetaMATLABretrans);                % if a reference sensor is given, calculate inter-site PLI for that        % sensor        if ~isempty (refelec)            PLIdiffmat = stdcomplexphasemat- (repmat(stdcomplexphasemat(refelec,:,:), [size(Data,1), 1, 1]));                   PLIdiffmat(refelec,:,:) = ones(size( PLIdiffmat(refelec,:,:)));             %standardize the difference            PLIdiffmat = PLIdiffmat./(abs(PLIdiffmat));         end                              if trialindex == 1            WaPowerSum = abs(thetaMATLABretrans).* 10;             PLIsum = stdcomplexphasemat;                 if ~isempty (refelec)            PLIdiffsum = PLIdiffmat;                 end        else        WaPowerSum = WaPowerSum + abs(thetaMATLABretrans).* 10;         PLIsum = PLIsum+ stdcomplexphasemat;            if ~isempty (refelec)               PLIdiffsum = PLIdiffsum+ PLIdiffmat;            end        end    end % loop over trials    % % intersite phaselocking with 138% % tempdiff = fftcomplexphasevec_norm - repmat(fftcomplexphasevec_norm(138,:), 257,1);% tempdiff(138,:) = ones(1,68);% tempdiff = tempdiff ./(abs(tempdiff)) ;% phaselock138 = abs(mean(tempdiff, 2));%             %final calculations: avg (and abs for PLI)        WaPower = WaPowerSum./NTrials;        PLI = abs(PLIsum./NTrials);            if ~isempty (refelec)         PLIdiff = abs(PLIdiffsum./NTrials);        end    ['save ' deblank(filemat(fileindex,:)) '.pow3.mat WaPower']    eval(['save ' deblank(filemat(fileindex,:)) '.pow3.mat WaPower'])    eval(['save ' deblank(filemat(fileindex,:)) '.pli3.mat PLI'])      if ~isempty (refelec),  eval(['save ' deblank(filemat(fileindex,:)) '.ispl3_' num2str(refelec) '.mat PLIdiff']), endend