% magno_waveletfunction [WaPower] = wavelet_app(filemat, f0start, f0end, fdelta); % 1. read data to get infofor fileindex = 1:size(filemat,1)  [data,Version,LHeader,ScaleBins,NChan,NPointsold,NTrials,SampRate,ch_AvgRef]=ReadAppData(filemat(fileindex,:));  NPointsold = size(data,2);    % Npoints -> next greatest power of 2 for FFT  matsize = 2;  potsize = 2;    while matsize < NPointsold;  potsize = potsize + 1;  matsize = 2^potsize;  end  NPointsNew = matsize;    % compute wavelets and their parameters   wavelet = gener_Wav(NPointsNew, fdelta, f0start, f0end);   disp('size of waveletMatrix')  disp(size(wavelet))  disp (' frequency step for delta_f0 = 1 is ')  disp(SampRate/NPointsNew)   data_pad = [data zeros(size(data,1), NPointsNew-NPointsold)]';       % create 3d matrix objects for wavelet   % channels * time * frequencies       waveletMat3d = repmat(wavelet, [1 1 size(data,1)]);     waveletMat3d = permute(waveletMat3d, [3, 2, 1]);         % loop over trials        disp(['trial index of '])    disp(NTrials)        for trialindex = 1:NTrials;                   [data,Version,LHeader,ScaleBins,NChan,NPointsold,NTrials,SampRate,ch_AvgRef]=ReadAppData(filemat(fileindex,:), trialindex);                fprintf('.')                 if trialindex/10 == round(trialindex/10), disp(trialindex), end            data = bslcorr(data, 1:100);                 data_pad = [data zeros(size(data,1), NPointsNew-NPointsold)]';        % window data with cosine square window        window = cosinwin(20, size(data,2), size(data,1));         data = data .* window;                 data_pad3d = repmat(data_pad', [1 1 size(wavelet,1)]);             % transform data  to the frequency        data_trans = fft(data_pad3d, NPointsNew, 2);        thetaMATLABretrans = [];         ProdMat= waveletMat3d .*(data_trans);        thetaMATLABretrans = ifft(ProdMat, NPointsNew, 2);                % standardize instantaneous phase        stdcomplexphasemat = thetaMATLABretrans ./ abs(thetaMATLABretrans);                      if trialindex == 1            WaPowerSum = abs(thetaMATLABretrans).* 10;             PLIsum = stdcomplexphasemat;         else        WaPowerSum = WaPowerSum + abs(thetaMATLABretrans).* 10;         PLIsum = PLIsum+ stdcomplexphasemat;         end    end % loop over trials        PLIsum = PLIsum(:, 1:NPointsold, :);        WaPower = WaPowerSum./NTrials;         WaPower = WaPower(:, 1:NPointsold, :);         PLI = abs(PLIsum./NTrials);     eval(['save ' filemat(fileindex,:) '.pow3.mat WaPower'])     eval(['save ' filemat(fileindex,:) '.pli3.mat PLI'])end