%% Berechnung der FFT pro Vp und pro Region%% fftMat ist Betragsvektor von fft der x, y, z Quellen pro regionale Quelle%% AmpMat ist Amplitude pro regionale Quelle%% PhaseMat ist Phaseninfo pro regionale Quelle%%%% data: Datenmatrix (18 Quellen, je drei orthogonale Quellen pro regionale Quelle%% occip links:     Dipole: 2, 7, 8%% occip rechts:    Dipole: 1, 9, 10%% pariet links:    Dipole: 3, 11, 12%% pariet rechts:   Dipole: 4, 13, 14%% temp links:      Dipole: 6, 17, 18%% temp rechts:     Dipole: 5, 15, 16%% Nummer Dipol entspricht der Zeile in der Datenmatrix%% vgl. Besa: general regional modell_dfunction [fftMat, AmpMat, PhaseMat] = reg_fft(data);%% fft für jede der 18 QuellenfftMat_18 = fft(data',128);             %% fft über columns und 125 Datenpunkte somit n = 128;                                        %% fft über Dipolmoment, pro Spalte ein Dipol, pro Zeile 128/250 Hz                                        %% pro Region den Betrag über Real- und Imaginäranteil berechenen%FFT für occipital linke regionale Quelle erzeugenoccip_links_x_real = real(fftMat_18(:,2));  occip_links_x_imag = imag(fftMat_18(:,2));occip_links_y_real = real(fftMat_18(:,8));occip_links_y_imag = imag(fftMat_18(:,8));occip_links_z_real = real(fftMat_18(:,7));occip_links_z_imag = imag(fftMat_18(:,7));oc_links_real = sqrt(occip_links_x_real.^2+occip_links_y_real.^2+occip_links_z_real.^2); % betrag von realvektoren x y zoc_links_imag = sqrt(occip_links_x_imag.^2+occip_links_y_imag.^2+occip_links_z_imag.^2); % betrag von imagvektoren x y z occip_links = complex(oc_links_real,oc_links_imag);     % Real und Imag-Anteile wieder in complexen VektorfftMat(:,1) = occip_links;                              % erste Spalte ist linke occipitale regionale QuelleAmpMat(:,1) = sqrt(abs(occip_links));                   % "" für AmplitudePhaseMat(:,1) = angle(occip_links);                     % "" für Phase%FFT für occipital rechte regionale Quelle erzeugenoccip_rechts_x_real = real(fftMat_18(:,1));  occip_rechts_x_imag = imag(fftMat_18(:,1));occip_rechts_y_real = real(fftMat_18(:,9));occip_rechts_y_imag = imag(fftMat_18(:,9));occip_rechts_z_real = real(fftMat_18(:,10));occip_rechts_z_imag = imag(fftMat_18(:,10));oc_rechts_real = sqrt(occip_rechts_x_real.^2+occip_rechts_y_real.^2+occip_rechts_z_real.^2); % betrag von realvektoren x y zoc_rechts_imag = sqrt(occip_rechts_x_imag.^2+occip_rechts_y_imag.^2+occip_rechts_z_imag.^2); % betrag von imagvektoren x y z occip_rechts = complex(oc_rechts_real,oc_rechts_imag);     % Real und Imag-Anteile wieder in complexen VektorfftMat(:,2) = occip_rechts;                              % zweite Spalte ist rechte occipitale regionale QuelleAmpMat(:,2) = sqrt(abs(occip_rechts));                   % "" für AmplitudePhaseMat(:,2) = angle(occip_rechts);                     % "" für Phase%FFT für parietal linke regionale Quelle erzeugenparie_links_x_real = real(fftMat_18(:,12));  parie_links_x_imag = imag(fftMat_18(:,12));parie_links_y_real = real(fftMat_18(:,11));parie_links_y_imag = imag(fftMat_18(:,11));parie_links_z_real = real(fftMat_18(:,3));parie_links_z_imag = imag(fftMat_18(:,3));pa_links_real = sqrt(parie_links_x_real.^2+parie_links_y_real.^2+parie_links_z_real.^2); % betrag von realvektoren x y zpa_links_imag = sqrt(parie_links_x_imag.^2+parie_links_y_imag.^2+parie_links_z_imag.^2); % betrag von imagvektoren x y z parie_links = complex(pa_links_real,pa_links_imag);     % Real und Imag-Anteile wieder in complexen VektorfftMat(:,3) = parie_links;                              % dritte Spalte ist linke parietale regionale QuelleAmpMat(:,3) = sqrt(abs(parie_links));                   % "" für AmplitudePhaseMat(:,3) = angle(parie_links);                     % "" für Phase%FFT für parietal rechte regionale Quelle erzeugenparie_rechts_x_real = real(fftMat_18(:,14));  parie_rechts_x_imag = imag(fftMat_18(:,14));parie_rechts_y_real = real(fftMat_18(:,13));parie_rechts_y_imag = imag(fftMat_18(:,13));parie_rechts_z_real = real(fftMat_18(:,4));parie_rechts_z_imag = imag(fftMat_18(:,4));pa_rechts_real = sqrt(parie_rechts_x_real.^2+parie_rechts_y_real.^2+parie_rechts_z_real.^2); % betrag von realvektoren x y zpa_rechts_imag = sqrt(parie_rechts_x_imag.^2+parie_rechts_y_imag.^2+parie_rechts_z_imag.^2); % betrag von imagvektoren x y z parie_rechts = complex(pa_rechts_real,pa_rechts_imag);     % Real und Imag-Anteile wieder in complexen VektorfftMat(:,4) = parie_rechts;                              % vierte Spalte ist rechte parietale regionale QuelleAmpMat(:,4) = sqrt(abs(parie_rechts));                   % "" für AmplitudePhaseMat(:,4) = angle(parie_rechts);                     % "" für Phase%FFT für temporal linke regionale Quelle erzeugentemp_links_x_real = real(fftMat_18(:,18));  temp_links_x_imag = imag(fftMat_18(:,18));temp_links_y_real = real(fftMat_18(:,6));temp_links_y_imag = imag(fftMat_18(:,6));temp_links_z_real = real(fftMat_18(:,17));temp_links_z_imag = imag(fftMat_18(:,17));te_links_real = sqrt(temp_links_x_real.^2+temp_links_y_real.^2+temp_links_z_real.^2); % betrag von realvektoren x y zte_links_imag = sqrt(temp_links_x_imag.^2+temp_links_y_imag.^2+temp_links_z_imag.^2); % betrag von imagvektoren x y z temp_links = complex(te_links_real,te_links_imag);     % Real und Imag-Anteile wieder in complexen VektorfftMat(:,5) = temp_links;                              % fünfte Spalte ist linke temporale regionale QuelleAmpMat(:,5) = sqrt(abs(temp_links));                   % "" für AmplitudePhaseMat(:,5) = angle(temp_links);                     % "" für Phase%FFT für temporal rechte regionale Quelle erzeugentemp_rechts_x_real = real(fftMat_18(:,16));  temp_rechts_x_imag = imag(fftMat_18(:,16));temp_rechts_y_real = real(fftMat_18(:,5));temp_rechts_y_imag = imag(fftMat_18(:,5));temp_rechts_z_real = real(fftMat_18(:,15));temp_rechts_z_imag = imag(fftMat_18(:,15));te_rechts_real = sqrt(temp_rechts_x_real.^2+temp_rechts_y_real.^2+temp_rechts_z_real.^2); % betrag von realvektoren x y zte_rechts_imag = sqrt(temp_rechts_x_imag.^2+temp_rechts_y_imag.^2+temp_rechts_z_imag.^2); % betrag von imagvektoren x y z temp_rechts = complex(te_rechts_real,te_rechts_imag);     % Real und Imag-Anteile wieder in complexen VektorfftMat(:,6) = temp_rechts;                              % sechste Spalte ist rechte temporale regionale QuelleAmpMat(:,6) = sqrt(abs(temp_rechts));                   % "" für AmplitudePhaseMat(:,6) = angle(temp_rechts);                     % "" für Phase