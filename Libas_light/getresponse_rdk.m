% searches condnumbers in *dat file generated by rdkiaps file

function [onsettime, outmat, picvec] = getresponse_rdk(filepath); %filepat = .dat file 
% can print out all of this...function [ conditionvec, RT, errorvec, onsettime, targetvec, earlylatelabel, picvec, outmat, RTvecEarlyLate, correctvec] = getresponse_rdk(filepath);

condvec = []; 

picvec = [];

fid = fopen(filepath)

trialcount = 1;
a = 1;
	
 while a > 0
	
     a = fgetl(fid);
     
     if a < 0, break, return, end
            
     % find the blanks - > so I know where the picture name is 
     blankindices = find(a== ' ');
     
      conditionTar = deblank(a(blankindices(4)+1)) %target/non-target condition file is after 3rd blank (1, 2, or 3)
      
      targetvec(trialcount) = str2num(conditionTar)
      
      onsettimetemp = deblank(a(blankindices(5):blankindices(5)+2))
      
      onsettime(trialcount) = str2num(onsettimetemp).*116.666 - 116.66;
            
     
     picturestring = (a((blankindices(7)+1:blankindices(7)+2))); %get the picture name info after the 7th blank
     picturestring_long = (a((blankindices(7)+1:blankindices(7)+4))); %get the picture name info after the 7th blank
     picvec = [picvec; picturestring_long];
     
     
     rt(trialcount) = str2num(a(blankindices(6):blankindices(7))); %get the RT info after the 6th blank
     
     if rt(trialcount) < 0, rt(trialcount) = rt(trialcount)+ 8751; end %8751 is the average tic/toc for trial length. Here we're using the ONSET of the 4 flick cycles for RT info   
          
               if picturestring ==  'er', condition(trialcount) = 1;
                elseif picturestring ==  'ct', condition(trialcount) = 2;    
                elseif picturestring ==  'ca', condition(trialcount) = 2;
                elseif picturestring ==  'wr', condition(trialcount) = 3;
                elseif picturestring ==  'wk', condition(trialcount) = 3;
                elseif picturestring ==  'cw', condition(trialcount) = 4;
                elseif picturestring ==  'co', condition(trialcount) = 4; 
                elseif picturestring ==  'mu', condition(trialcount) = 5;
                elseif picturestring ==  'mt', condition(trialcount) = 5;    
                elseif picturestring ==  'sn', condition(trialcount) = 6;
                
                end
      
              trialcount;
 
              
trialcount = trialcount + 1; 
 end % while loop trials
 
 
fclose('all')
  
targetvec = targetvec' .* 100

conditionvec = condition' + targetvec; 
  
conditionvec1to6 = condition'; %condition = picture conditions, 

rt = rt' .*0.001; %change RT into seconds

onsettime = onsettime' .*0.001; %change onset time also into seconds

RT = rt; 
RT(rt>0) = rt(rt>0)-onsettime(rt>0);% convert rt relative to picture offset to RT relative to target
%RT = RT' %this is to account for non-presses when a non-target (corr. rejections) .. auto put RT for non-target as 0.116 and had to make sure all non-press RT's are set to ZERO


earlylatelabel = zeros(size(RT)); 

earlylatelabel(find(onsettime>3.750)) = 2;
earlylatelabel(find(onsettime>1 & onsettime<3.751)) = 1; 

duringpiclabel  = zeros(size(RT)); 
duringpiclabel(onsettime>3) = 1;

%didn't count 1st second with scrambled pic 
%9.56s (trial lenth) - 1 (scrambled pic) - 1 (1st second of scr + dots NOT
%included in target section) = 7.56/2 (early/late separations) = 3.75)

condition = condition' .*100;% condition zero R.Time --> 106.4753 (Cond 1 w/RT = 6.4753 sec)

conditionvecPicRT =[conditionvec  RT]; % can use a semi-colon to have the conditionvec and RT values not stacked but side by side 
size(conditionvec);

% %create a vector that has 1s for correct responses, for each trial
indexvec_press = find(RT > .15);
correctvec = zeros(size(condition)); %empty vector to populate
targettrialindices = find(targetvec > 199 & targetvec <  299); %299 excludes the double-flick trials
notargettrialindices = find(targetvec > 99 & targetvec <  199); %excludes the double-flick trials and the one-target trials

%  populate correctvec
for x1 = 1:length(correctvec) 
    if ismember(x1,targettrialindices) && ismember(x1,indexvec_press), correctvec(x1) = 1; end %hit
end

%if its not a target trial and they pressed after 150 ms, incorrect
for x2 = 1:length(correctvec) 
    if ismember(x2,notargettrialindices) && ismember(x2,indexvec_press), correctvec(x2) = 0; end %false alaram
end

%if its not a target trial and they did NOT press after 150 ms, correct rejection
for x3 = 1:length(correctvec) 
    if ismember(x3,notargettrialindices) && ~ismember(x3,indexvec_press), correctvec(x3) = 1; end %correct rejection
end

% finally create a comprehensive output matrix with trial-by-trial data
outmat = [conditionvec RT correctvec duringpiclabel];
accuracy = (sum(correctvec)/116); %don't include the 4 double-flick trials    %%%%% :-) 


%output matrix of condivion vec (target/nontarget and condition#), RT, and correct(1)/incorrect(0) response 

% find all the response times for all conditions
indices_101 = find(conditionvecPicRT(:,1) == 101); response_101 = conditionvecPicRT(indices_101,2); 
indices_102 = find(conditionvecPicRT(:,1) == 102); response_102 = conditionvecPicRT(indices_102,2); 
indices_103 = find(conditionvecPicRT(:,1) == 103); response_103 = conditionvecPicRT(indices_103,2); 
indices_104 = find(conditionvecPicRT(:,1) == 104); response_104 = conditionvecPicRT(indices_104,2); 
indices_105 = find(conditionvecPicRT(:,1) == 105); response_105 = conditionvecPicRT(indices_105,2); 
indices_106 = find(conditionvecPicRT(:,1) == 106); response_106 = conditionvecPicRT(indices_106,2); 
indices_201 = find(conditionvecPicRT(:,1) == 201); response_201 = conditionvecPicRT(indices_201,2);
indices_202 = find(conditionvecPicRT(:,1) == 202); response_202 = conditionvecPicRT(indices_202,2); 
indices_203 = find(conditionvecPicRT(:,1) == 203); response_203 = conditionvecPicRT(indices_203,2); 
indices_204 = find(conditionvecPicRT(:,1) == 204); response_204 = conditionvecPicRT(indices_204,2); 
indices_205 = find(conditionvecPicRT(:,1) == 205); response_205 = conditionvecPicRT(indices_205,2); 
indices_206 = find(conditionvecPicRT(:,1) == 206); response_206 = conditionvecPicRT(indices_206,2); 

% % now for conditions with targets: Mean RT
% %correct response if clicked after 150 ms AND if the correctvec = 1
indices_correct_201 =  find(response_201 > 0.15 & correctvec(indices_201) == 1) ; meanRT_201 = mean(response_201(indices_correct_201));
indices_correct_202 =  find(response_202 > 0.15 & correctvec(indices_202) == 1) ; meanRT_202 = mean(response_202(indices_correct_202));
indices_correct_203 =  find(response_203 > 0.15 & correctvec(indices_203) == 1) ; meanRT_203 = mean(response_203(indices_correct_203));
indices_correct_204 =  find(response_204 > 0.15 & correctvec(indices_204) == 1) ; meanRT_204 = mean(response_204(indices_correct_204));
indices_correct_205 =  find(response_205 > 0.15 & correctvec(indices_205) == 1) ; meanRT_205 = mean(response_205(indices_correct_205));
indices_correct_206 =  find(response_206 > 0.15 & correctvec(indices_206) == 1) ; meanRT_206 = mean(response_206(indices_correct_206));

indices_correct_101 =  find(response_101 == 0 & correctvec(indices_101) == 1) ; 
indices_correct_102 =  find(response_102 == 0 & correctvec(indices_102) == 1) ; 
indices_correct_103 =  find(response_103 == 0 & correctvec(indices_103) == 1) ; 
indices_correct_104 =  find(response_104 == 0 & correctvec(indices_104) == 1) ; 
indices_correct_105 =  find(response_105 == 0 & correctvec(indices_105) == 1) ; 
indices_correct_106 =  find(response_106 == 0 & correctvec(indices_106) == 1) ; 

%total % correct when taking hits AND correct rejections into account (includes entire time window):
accuracy_ero = (length(indices_correct_201)/length(find((indices_201))) + length(indices_correct_101)/length(find((indices_101))))/2
accuracy_cat = (length(indices_correct_202)/length(find((indices_202))) + length(indices_correct_102)/length(find((indices_102))))/2
accuracy_wrk = (length(indices_correct_203)/length(find((indices_203))) + length(indices_correct_103)/length(find((indices_103))))/2
accuracy_cow = (length(indices_correct_204)/length(find((indices_204))) + length(indices_correct_104)/length(find((indices_104))))/2
accuracy_mut = (length(indices_correct_205)/length(find((indices_205))) + length(indices_correct_105)/length(find((indices_105))))/2 %works as is :) takes into account correct rejections and hits.
accuracy_snk = (length(indices_correct_206)/length(find((indices_206))) + length(indices_correct_106)/length(find((indices_106))))/2


%percent error: nontargets -> FALSE ALARMS
%erroneous response if clicked the mouse at all for the non-targets
error_101 = 1-length(find(correctvec(indices_101) > 0))/length(indices_101);
error_102 = 1-length(find(correctvec(indices_102) > 0))/length(indices_102);
error_103 = 1-length(find(correctvec(indices_103) > 0))/length(indices_103);
error_104 = 1-length(find(correctvec(indices_104) > 0))/length(indices_104);
error_105 = 1-length(find(correctvec(indices_105) > 0))/length(indices_105);
error_106 = 1-length(find(correctvec(indices_106) > 0))/length(indices_106);

% need to find when the individual response is after 150 ms AND the
% correctvec == 1. Once we have that, then we need to assign the early/late
% label and THEN get the mean of that value. I think I did that below in the next 2 sections: \/

% now for conditions with targets: Mean RT SPLIT BY EARLY AND LATE
%correct response if clicked after 150 ms
%%%%%%% EARLY RTs
% added this: & correctvec(indices_201) == 1
indices_correct_201_early =  find(response_201 > 0.15 & earlylatelabel(indices_201) ==1 & correctvec(indices_201) == 1);  meanRT_201_early = mean(response_201(indices_correct_201_early));
indices_correct_202_early =  find(response_202 > 0.15 & earlylatelabel(indices_202) ==1 & correctvec(indices_202) == 1) ; meanRT_202_early = mean(response_202(indices_correct_202_early));
indices_correct_203_early =  find(response_203 > 0.15 & earlylatelabel(indices_203) ==1 & correctvec(indices_203) == 1) ; meanRT_203_early = mean(response_203(indices_correct_203_early));
indices_correct_204_early =  find(response_204 > 0.15 & earlylatelabel(indices_204) ==1 & correctvec(indices_204) == 1) ; meanRT_204_early = mean(response_204(indices_correct_204_early));
indices_correct_205_early =  find(response_205 > 0.15 & earlylatelabel(indices_205) ==1 & correctvec(indices_205) == 1); meanRT_205_early = mean(response_205(indices_correct_205_early));
indices_correct_206_early =  find(response_206 > 0.15 & earlylatelabel(indices_206) ==1 & correctvec(indices_206) == 1) ; meanRT_206_early = mean(response_206(indices_correct_206_early));

%finds the proportion of correct responses for each condition - EARLY 
propcorrect_201_early = length(indices_correct_201_early)/length(find(earlylatelabel(indices_201) ==1));
propcorrect_202_early = length(indices_correct_202_early)/length(find(earlylatelabel(indices_202) ==1));
propcorrect_203_early = length(indices_correct_203_early)/length(find(earlylatelabel(indices_203) ==1));
propcorrect_204_early = length(indices_correct_204_early)/length(find(earlylatelabel(indices_204) ==1));
propcorrect_205_early = length(indices_correct_205_early)/length(find(earlylatelabel(indices_205) ==1));
propcorrect_206_early = length(indices_correct_206_early)/length(find(earlylatelabel(indices_206) ==1));


%write out the actual number of correct trials () and # of total trials per condition - EARLY 
num_corr_201_early = length(indices_correct_201_early);
num_total_201_early = length(find(earlylatelabel(indices_201) ==1));
num_corr_202_early = length(indices_correct_202_early);
num_total_202_early = length(find(earlylatelabel(indices_202) ==1));
num_corr_203_early = length(indices_correct_203_early);
num_total_203_early = length(find(earlylatelabel(indices_203) ==1));
num_corr_204_early = length(indices_correct_204_early);
num_total_204_early = length(find(earlylatelabel(indices_204) ==1));
num_corr_205_early = length(indices_correct_205_early);
num_total_205_early = length(find(earlylatelabel(indices_205) ==1));
num_corr_206_early = length(indices_correct_206_early);
num_total_206_early = length(find(earlylatelabel(indices_206) ==1));


% now for conditions with targets: Mean RT SPLIT BY EARLY AND LATE
%%%%% LATE RTS
%correct response if clicked after 150 ms 
%added this:  & correctvec(indices_201) == 1
indices_correct_201_late =  find(response_201 > 0.15 & earlylatelabel(indices_201) ==2 & correctvec(indices_201) == 1) ; meanRT_201_late = mean(response_201(indices_correct_201_late));
indices_correct_202_late =  find(response_202 > 0.15 & earlylatelabel(indices_202) ==2 & correctvec(indices_202) == 1) ; meanRT_202_late = mean(response_202(indices_correct_202_late));
indices_correct_203_late =  find(response_203 > 0.15 & earlylatelabel(indices_203) ==2 & correctvec(indices_203) == 1) ; meanRT_203_late = mean(response_203(indices_correct_203_late));
indices_correct_204_late =  find(response_204 > 0.15 & earlylatelabel(indices_204) ==2 & correctvec(indices_204) == 1) ; meanRT_204_late = mean(response_204(indices_correct_204_late));
indices_correct_205_late =  find(response_205 > 0.15 & earlylatelabel(indices_205) ==2 & correctvec(indices_205) == 1) ; meanRT_205_late = mean(response_205(indices_correct_205_late));
indices_correct_206_late =  find(response_206 > 0.15 & earlylatelabel(indices_206) ==2 & correctvec(indices_206) == 1) ; meanRT_206_late = mean(response_206(indices_correct_206_late));


%finds the proportion of correct responses for each condition - LATE 
propcorrect_201_late = length(indices_correct_201_late)/length(find(earlylatelabel(indices_201) ==2));
propcorrect_202_late = length(indices_correct_202_late)/length(find(earlylatelabel(indices_202) ==2));
propcorrect_203_late = length(indices_correct_203_late)/length(find(earlylatelabel(indices_203) ==2));
propcorrect_204_late = length(indices_correct_204_late)/length(find(earlylatelabel(indices_204) ==2));
propcorrect_205_late = length(indices_correct_205_late)/length(find(earlylatelabel(indices_205) ==2));
propcorrect_206_late = length(indices_correct_206_late)/length(find(earlylatelabel(indices_206) ==2));

%write out the actual number of correct trials () and # of total trials per condition - LATE 
num_corr_201_late = length(indices_correct_201_late);
num_total_201_late = length(find(earlylatelabel(indices_201) ==2));
num_corr_202_late = length(indices_correct_202_late);
num_total_202_late = length(find(earlylatelabel(indices_202) ==2));
num_corr_203_late = length(indices_correct_203_late);
num_total_203_late = length(find(earlylatelabel(indices_203) ==2));
num_corr_204_late = length(indices_correct_204_late);
num_total_204_late = length(find(earlylatelabel(indices_204) ==2));
num_corr_205_late = length(indices_correct_205_late); %this part is right - it says there are 5 correct answers :) 
num_total_205_late = length(find(earlylatelabel(indices_205) ==2));
num_corr_206_late = length(indices_correct_206_late);
num_total_206_late = length(find(earlylatelabel(indices_206) ==2));

% for conditions without targets: mean RT of the false alarms
meanRT_101 = mean(response_101); 
meanRT_102 = mean(response_102); 
meanRT_103 = mean(response_103); 
meanRT_104 = mean(response_104); 
meanRT_105 = mean(response_105); 
meanRT_106 = mean(response_106); 

% percent error: targets -> MISSES overall - didn't click for target
error_201 = 1- length(indices_correct_201)/length(indices_201);
error_202 = 1- length(indices_correct_202)/length(indices_202);
error_203 = 1- length(indices_correct_203)/length(indices_203);
error_204 = 1- length(indices_correct_204)/length(indices_204);
error_205 = 1- length(indices_correct_205)/length(indices_205);
error_206 = 1- length(indices_correct_206)/length(indices_206);


% percent error: targets -> HITS overall - clicked for target
hits_201 = length(indices_correct_201)/length(indices_201);
hits_202 = length(indices_correct_202)/length(indices_202);
hits_203 = length(indices_correct_203)/length(indices_203);
hits_204 = length(indices_correct_204)/length(indices_204);
hits_205 = length(indices_correct_205)/length(indices_205);
hits_206 = length(indices_correct_206)/length(indices_206);


%%%%% percent errors for early and late  indices_correct_201_early
%%% EARLY
% percent error: targets -> misses EARLY
error_201_early = 1- length(indices_correct_201_early)/length(indices_correct_201_early);
error_202_early = 1- length(indices_correct_202_early)/length(indices_correct_202_early);
error_203_early = 1- length(indices_correct_203_early)/length(indices_correct_203_early);
error_204_early = 1- length(indices_correct_204_early)/length(indices_correct_204_early);
error_205_early = 1- length(indices_correct_205_early)/length(indices_correct_205_early);
error_206_early = 1- length(indices_correct_206_early)/length(indices_correct_206_early);


%%%%% percent errors for early and late  indices_correct_201_early
%%% LATE
% percent error: targets -> misses LATE
error_201_late = 1- length(indices_correct_201_late)/length(indices_correct_201_late);
error_202_late = 1- length(indices_correct_202_late)/length(indices_correct_202_late);
error_203_late = 1- length(indices_correct_203_late)/length(indices_correct_203_late);
error_204_late = 1- length(indices_correct_204_late)/length(indices_correct_204_late);
error_205_late = 1- length(indices_correct_205_late)/length(indices_correct_205_late);
error_206_late = 1- length(indices_correct_206_late)/length(indices_correct_206_late);

%get the d' for each condition: hits - FA's (really it's behavioral sensitvity now -- convert to z scores for d')
dprimeEro = (hits_201 - error_101); 
dprimeCats = (hits_202 - error_102); 
dprimeWork = (hits_203 - error_103); 
dprimeCows = (hits_204 - error_104); 
dprimeMut = (hits_205 - error_105); 
dprimeSnks = (hits_206 - error_106); 




%accuracy for early and late responses -- correct (hits and correct %rejections..i think)
%accuracy_vec = [accuracy propcorrect_201_early propcorrect_202_early propcorrect_203_early propcorrect_204_early propcorrect_205_early propcorrect_206_early propcorrect_201_late propcorrect_202_late propcorrect_203_late propcorrect_204_late propcorrect_205_late propcorrect_206_late]*100;

accuracy_vec = [accuracy accuracy_ero accuracy_cat accuracy_wrk accuracy_cow accuracy_mut accuracy_snk];

% proportion (in percentage) of hits for early/late time windows for target conditions, by condition
propcorrect_EarlyLate = [propcorrect_201_early propcorrect_202_early propcorrect_203_early propcorrect_204_early propcorrect_205_early propcorrect_206_early propcorrect_201_late propcorrect_202_late propcorrect_203_late propcorrect_204_late propcorrect_205_late propcorrect_206_late];
%actual #'s for proportions of hits for early/late time windows for target conditoins, by condition 
propnums_early = [num_corr_201_early num_corr_202_early num_corr_203_early num_corr_204_early num_corr_205_early num_corr_206_early; num_total_201_early num_total_202_early num_total_203_early num_total_204_early num_total_205_early num_total_206_early];
propnums_late = [num_corr_201_late num_corr_202_late num_corr_203_late num_corr_204_late num_corr_205_late num_corr_206_late; num_total_201_late num_total_202_late num_total_203_late num_total_204_late num_total_205_late num_total_206_late];

%hits and false alarms
Hit_FAvec = [hits_201 hits_202 hits_203 hits_204 hits_205 hits_206; error_101 error_102 error_103 error_104 error_105 error_106]';
%columns of hits and false alarms & behavioral sensitivity measure (convert to z score for d prime)
Hit_FA_bsensvec = [hits_201 hits_202 hits_203 hits_204 hits_205 hits_206 error_101 error_102 error_103 error_104 error_105 error_106 dprimeEro dprimeCats dprimeWork dprimeCows dprimeMut dprimeSnks]; %horizontal line of results

%FA_Missvec = [error_101 error_102 error_103 error_104 error_105 error_106; error_201 error_202 error_203 error_204 error_205 error_206]'
%vector of FAs (1st) and misses (2nd) in two rows to import into SPSS :) 

errorvec_earlylate = [error_201_early error_202_early error_203_early error_204_early error_205_early error_206_early error_201_late error_202_late error_203_late error_204_late error_205_late error_206_late]';
% errorvec_earlylate 1st 6 are early, last 6 are late --> percent errors 

hitRTvec_early =  [meanRT_201_early meanRT_202_early meanRT_203_early meanRT_204_early meanRT_205_early meanRT_206_early]'; 
%RT vector for early targets (hits); 

hitRTvec_late =  [meanRT_201_late meanRT_202_late meanRT_203_late meanRT_204_late meanRT_205_late meanRT_206_late]'; 
% RT vector for late targets (hits)

RTvecEarlyLate = [meanRT_201_early meanRT_202_early meanRT_203_early meanRT_204_early meanRT_205_early meanRT_206_early meanRT_201_late meanRT_202_late meanRT_203_late meanRT_204_late meanRT_205_late meanRT_206_late];
%dont need ; to separate to VECTORS into columns (matrix? yes)...use ; to separate within a vector..BUT I need them in a row here so I can use it in SPSS 

rtvec = [meanRT_101 meanRT_102 meanRT_103 meanRT_104 meanRT_105 meanRT_106 meanRT_201 meanRT_202 meanRT_203 meanRT_204 meanRT_205 meanRT_206]; 
%RT vector for overall RT not including earlylate labels (entire trial) for targets and non-targets

errorvec = [error_101 error_102 error_103 error_104 error_105 error_106 error_201 error_202 error_203 error_204 error_205 error_206]'; 
%<- false alarm vector 1st 6: non-targets, 2nd 6: targets

dprime = [dprimeEro dprimeCats dprimeWork dprimeCows dprimeMut dprimeSnks];
%calcs d' 

BehData = [accuracy_vec Hit_FA_bsensvec rtvec]


% % %creates a figure for each hit/false alarm pair per condition:
% axis([0 7 0 1]) %sets a standard axis for every graph
% figurebar = bar(Hit_FAvec, 'DisplayName','Hit_FAvec'); figure(gcf); axis([0 7 0 1]); %prints bar graph of hits/false alarms vector for each condition
% ext = '.fig'; %saves as matlab figure - can be adjusted later w/o reprinting :) 
% path = '/Users/Menton/matlab_as/MentonExperiments/RDK_IAPS/Final_Sample/onlydatfiles/'; %where to save
% file_name = (filepath);%names each .fig after the subjectID
% figure_name = '(file_name)'; %to save as what name
% saveas(gcf, [path, file_name, ext], 'fig'); %saves figure!



%files to print out:

eval(['save ' filepath '.conHit_FA_dvec Hit_FA_bsensvec -ascii']) 

eval(['save ' filepath '.condprime dprime -ascii']) 

%eval(['save ' filepath '.conPicName picvec -ascii']) 

%eval(['save ' filepath '.conOutmat outmat -ascii']) 

%eval(['save ' filepath '.con conditionvec -ascii'])

%eval(['save ' filepath '.con1t6 conditionvec1to6 -ascii'])

eval(['save ' filepath '.conRTVec rtvec -ascii'])

%eval(['save ' filepath '.conBehData BehData -ascii'])

%eval(['save ' filepath '.conpropnums_early propnums_early -ascii']) 
%eval(['save ' filepath '.conpropnums_early propnums_early -ascii']) 
%eval(['save ' filepath '.conpropnums_late propnums_late -ascii']) 
%eval(['save ' filepath '.conHit_FAvec Hit_FAvec -ascii']) 
%eval(['save ' filepath '.conFA_Missvec FA_Missvec -ascii']) don't need this right now
%eval(['save ' filepath '.conRTvecEarlyLate RTvecEarlyLate -ascii']) 
%eval(['save ' filepath '.conErrorVec errorvec -ascii'])
%eval(['save ' filepath '.conhitRTvecEarly hitRTvec_early -ascii'])
%eval(['save ' filepath '.conhitRTvecLate hitRTvec_late -ascii'])
%eval(['save ' filepath '.conerrorvecEarlyLate errorvec_earlylate -ascii'])

