function [tenHZampfft,  Phasevec, winmat, FourierCompVec] = win2amplitude(FilePath);winmat = load(FilePath); % find winmatnamecolonindex = find(FilePath == ':');winmatname = FilePath(max(colonindex)+1:length(FilePath))% for fft with amplitude scaling:NFFT = 128; NumUniquePts = ceil((NFFT+1)/2); fftMat = fft (winmat', 128);  % transpose: channels as columns (fft columnwise)Mag = abs(fftMat);                                                   % Amplitude berechnenMag = Mag*2;   Mag(1) = Mag(1)/2;                                                    % DC trat aber nicht doppelt aufif ~rem(NFFT,2),                                                    % Nyquist Frequenz (falls vorhanden) auch nicht doppelt    Mag(length(Mag))=Mag(length(Mag))/2;endMag=Mag/NFFT;                                                         % FFT so skalieren, da§ sie keine Funktion von NFFT isttenHZampfft = Mag(6,:);PowerMat = real(fftMat.*conj(fftMat)/128);%tenHZampfft = sqrt(PowerMat(6,:));PhaseMat = atan(real(fftMat)./imag(fftMat));Phasevec = PhaseMat(6,:);FourierCompVec = fftMat(6,:);ampliname = [winmatname '10Hzamp'];eval(['save ElNino:As_Exps:ssvep_att:ssvep:all10Hzamp:' ampliname  ' tenHZampfft -ascii'])disp ('saving file'), disp(ampliname)