function [IBIvec, BPM, spectrum, frequencies]  = eeglab2HR(segment, samplerate); 

BPM = []; 
spectrum = []; 
frequencies = []; 

time = 0:1000/samplerate:length(segment)*1000/samplerate-1000/samplerate; 
length(time)
length(segment)


    
    [B,A] = butter(6,.05, 'high'); % first define a 6th order higpass filter at 0.025 of the sample rate (gets rif of drift)

    ECG =filtfilt(B, A, segment); % filter the segment
    
    ECGsquare = [segment(1) (diff(ECG).^2)]; % square the derivative of the segment, to increase the signal to noise of the R wave
     
    subplot(2,1,1), plot(time, ECG), title('raw EKG')

   subplot(2,1,2),  plot(time, ECGsquare), title('derivative / integrated EKG'), hold on

    
    % find and plot R-peaks
    stdECG = std(ECGsquare); 
    threshold = 4*stdECG; 
    Rchange=  find(ECGsquare > threshold);
    Rstamps = [Rchange(find(diff(Rchange)>10)) Rchange(end)];
    subplot(2,1,2)
    plot(time(Rstamps), threshold, 'r*')
    
    
    % calculate IBIs; calculate median and std for
    % artifact definition
   plot(time(Rstamps), threshold, 'r*')
    Rwavestamps = time(Rstamps)./1000 
   IBIvec = diff(Rwavestamps);
   medIBI =  median(IBIvec); 
   upperlimit = medIBI+ 1.5.* std(IBIvec)
   lowerlimit = medIBI - 1.5.* std(IBIvec) 
 
    % artfact handling
    RwavestampsNew = Rwavestamps(1);  % user makes sure first R-wave is real 
    
 % first pass
    for x = 1:length(Rwavestamps)-1
        if IBIvec(x) < lowerlimit, 
            RwavestampsNew = [RwavestampsNew]
        elseif IBIvec(x) > upperlimit, 
            RwavestampsNew = [RwavestampsNew RwavestampsNew+ round(medIBI)]
        else
        RwavestampsNew = [RwavestampsNew Rwavestamps(x)];
        end   
    end
    if IBIvec(end) > lowerlimit, RwavestampsNew = [RwavestampsNew Rwavestamps(end)]; end
 
          plot(RwavestampsNew.*1000, 1.4*threshold, 'g*')
          
          
% second pass
        IBIvec2 = diff(RwavestampsNew); 
        RwavestampsNew2 = RwavestampsNew(1) % start with a scalar as done above
     
     for x = 1:length(RwavestampsNew)-1
         IBIvec2
        if IBIvec2(x) > upperlimit, 
            RwavestampsNew2 = [RwavestampsNew2 RwavestampsNew2+ round(medIBI)]
        else
        RwavestampsNew2 = [RwavestampsNew2 RwavestampsNew(x)];
        end   
    end
     if IBIvec2(end) > lowerlimit, RwavestampsNew2 = [RwavestampsNew2 RwavestampsNew(end)]; end
    
        plot(RwavestampsNew2.*1000, 1.9*threshold, 'm*')
        
        hold off
   



